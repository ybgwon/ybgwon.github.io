<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>go on YB Gwon's ...</title><link>/tags/go/</link><description>Recent content in go on YB Gwon's ...</description><generator>Hugo -- gohugo.io</generator><copyright>Copyright &amp;copy; 2019 - ybgwon</copyright><lastBuildDate>Wed, 02 Apr 2014 00:00:00 +0000</lastBuildDate><atom:link href="/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>kernel-study-2019-11-23</title><link>/posts/kernel-study-2019-11-23/</link><pubDate>Thu, 05 Dec 2019 19:37:00 +0900</pubDate><guid>/posts/kernel-study-2019-11-23/</guid><description>&lt;p>boot_cpu_init 함수 분석. 첫번째 processor 를 활성화한다.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">&lt;span style="color:#66d9ef">void&lt;/span> __init &lt;span style="color:#a6e22e">boot_cpu_init&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span>)
{
&lt;span style="color:#66d9ef">int&lt;/span> cpu &lt;span style="color:#f92672">=&lt;/span> smp_processor_id();
&lt;span style="color:#75715e">/* Mark the boot cpu &amp;#34;present&amp;#34;, &amp;#34;online&amp;#34; etc for SMP and UP case */&lt;/span>
set_cpu_online(cpu, true);
set_cpu_active(cpu, true);
set_cpu_present(cpu, true);
set_cpu_possible(cpu, true);
&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">ifdef CONFIG_SMP&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span> __boot_cpu_id &lt;span style="color:#f92672">=&lt;/span> cpu;
&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">endif&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="smp-processor-id">smp_processor_id&lt;/h2>
&lt;p>percpu 변수 cpu_number 값을 매크로 함수를 통해 읽어 온다&lt;/p>
&lt;h3 id="cpu-number">cpu_number&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">define raw_smp_processor_id() (*raw_cpu_ptr(&amp;amp;cpu_number))&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>raw_cpu_ptr 매크로 함수로 넘어가는 cpu_number 파라메터는아래와 같이 정의돼 있다.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">DECLARE_PER_CPU_READ_MOSTLY(&lt;span style="color:#66d9ef">int&lt;/span>, cpu_number);
&lt;/code>&lt;/pre>&lt;/div>&lt;p>결국 아래와 같이 변환된다.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">&lt;span style="color:#66d9ef">extern&lt;/span> __attribute__((section(.data..percpu..read_mostly)) &lt;span style="color:#66d9ef">int&lt;/span> cpu_number
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="typeof">&lt;code>__typeof__&lt;/code>&lt;/h4>
&lt;p>변수 타입 반환 gcc 확장기능&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">&lt;span style="color:#66d9ef">int&lt;/span> i;
__typeof__(i) j;
&lt;span style="color:#75715e">/* above equals int j */&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="raw-cpu-ptr">raw_cpu_ptr&lt;/h3>
&lt;p>매크로 함수&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">define raw_cpu_ptr(ptr) \&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">({ \&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e"> __verify_pcpu_ptr(ptr); \&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e"> arch_raw_cpu_ptr(ptr); \&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">})&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="verify-pcpu-ptr--ptr">__verify_pcpu_ptr(ptr)&lt;/h4>
&lt;p>__CHECKER__(정적분석도구) 가 define 되어 있을때 ptr이 percpu 영역에 있는지 검사&lt;/p>
&lt;h4 id="arch-raw-cpu-ptr--ptr">arch_raw_cpu_ptr(ptr);&lt;/h4>
&lt;p>ptr 과 __my_cpu_offset를 매개 변수로 RELOC_HIDE 호출&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">define SHIFT_PERCPU_PTR(__p, __offset) \&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e"> RELOC_HIDE((typeof(*(__p)) __kernel __force *)(__p), (__offset))&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>RELOC_HIDE - 컴파일러 에러 방지 위해 사용하는 매크로 함수.&lt;br>
&lt;a href="http://studyfoss.egloos.com/5374731">http://studyfoss.egloos.com/5374731&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>return 값&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">&lt;span style="color:#75715e">#&lt;/span>&lt;span style="color:#75715e">define RELOC_HIDE(ptr, off) \&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">({ \&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e"> unsigned long __ptr; \&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e"> __asm__ (&amp;#34;&amp;#34; : &amp;#34;=r&amp;#34;(__ptr) : &amp;#34;0&amp;#34;(ptr)); \&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e"> (typeof(ptr)) (__ptr + (off)); \&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">})&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>마지막 __ptr + (off) return. 마지막 부분은 선언만 하고 있으나&lt;br>
gcc 확장기능에 의해 return 된다&lt;br>
gcc 확장기능 - compound statement(중괄호로 둘러싼 여러 statement)를&lt;br>
expression으로 해석하는 기능.&lt;br>
최종 결과는 아래와 같다.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">(&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#f92672">*&lt;/span>) (&lt;span style="color:#f92672">&amp;amp;&lt;/span>cpu_number &lt;span style="color:#f92672">+&lt;/span> tpidr_el1 value)
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="set-cpu-online--set-cpu-active-set-cpu-present-set-cpu-possible">set_cpu_online(set_cpu_active,set_cpu_present,set_cpu_possible)&lt;/h2>
&lt;p>struct cpumask 형식의 __cpu_online_mask&lt;br>
구조체의 멤버인 bits 배열에 현재 cpu 의 bit를 set 한다.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">&lt;span style="color:#66d9ef">struct&lt;/span> cpumask __cpu_online_mask { &lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> bits[&lt;span style="color:#ae81ff">4&lt;/span>]; };
cpumask_set_cpu(cpu, &lt;span style="color:#f92672">&amp;amp;&lt;/span>__cpu_online_mask);
&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> * cpu 가 129 라면 129/64 0~63, 64~127, 128,129... 순이 되고
&lt;/span>&lt;span style="color:#75715e"> * 3번째 인덱스의 2번째 비트를 1로 set하게 되므로 bits[2]
&lt;/span>&lt;span style="color:#75715e"> * 의 값이 2 가 된다. bits[2] 이 원래 0 이었을 경우
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
bits[&lt;span style="color:#ae81ff">2&lt;/span>] &lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>;
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="set-bit--cpumask-checkcpu--cpumask-bits--dstp">set_bit(cpumask_check(cpu), cpumask_bits(dstp))&lt;/h3>
&lt;p>setbit 함수의 경우 현재 cpu 변수와 cpumask 구조체의 포인터를가지고 결국 bits 배열에 cpu 변수를 set 하는 atomic asm 명령어를호출하게 된다.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">inline&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> arch_atomic64_&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>op(&lt;span style="color:#66d9ef">long&lt;/span> i, atomic64_t &lt;span style="color:#f92672">*&lt;/span>v) \
{ \
&lt;span style="color:#66d9ef">register&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> x0 &lt;span style="color:#66d9ef">asm&lt;/span> (&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">x0&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>) &lt;span style="color:#f92672">=&lt;/span> i; \
&lt;span style="color:#66d9ef">register&lt;/span> atomic64_t &lt;span style="color:#f92672">*&lt;/span>x1 &lt;span style="color:#a6e22e">asm&lt;/span> (&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">x1&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>) &lt;span style="color:#f92672">=&lt;/span> v; \
\
&lt;span style="color:#66d9ef">asm&lt;/span> &lt;span style="color:#a6e22e">volatile&lt;/span>(ARM64_LSE_ATOMIC_INSN(__LL_SC_ATOMIC64(op), \
&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74"> &lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>asm_op &lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74"> %[i], %[v]&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>) \
&lt;span style="color:#f92672">:&lt;/span> [i] &lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">+r&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> (x0), [v] &lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">+Q&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> (v&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>counter) \
&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">r&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> (x1) \
&lt;span style="color:#f92672">:&lt;/span> __LL_SC_CLOBBERS); \
}
ATOMIC64_OP(or, stset)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>위 inline asm 명령은 lse 기능(ARMV8.1이상)을 cpu 에서지원하느냐에 따라 LL/SC 방식이나 CAS 구현방식을 사용하는 LSE 중에&lt;br>
ALTERNATIVE 매크로를 이용하여 atomic 명령을 선택하게 된다.&lt;/p>
&lt;figure>&lt;a href="/images/stset.png">
&lt;img src="/images/stset.png"/> &lt;/a>
&lt;/figure>
&lt;h3 id="atomic-operation">Atomic Operation&lt;/h3>
&lt;ol>
&lt;li>ARMv5 이하모두 UP(Uni Processor) 시스템용으로만 구현되어 있어 인터럽트를 막는 것으로 구현&lt;/li>
&lt;li>ARMv6, ARMv7&lt;br>
UP로 커널을 빌드하여 사용 시 인터럽트를 막는 것으로 구현&lt;br>
SMP로 커널을 빌드하여 사용 시 LL/SC 방식으로 구현&lt;/li>
&lt;li>ARMv8&lt;br>
UP/SMP 가리지 않고 LL/SC 방식으로 구현&lt;/li>
&lt;li>ARMv8.1~&lt;br>
UP/SMP 가리지 않고 CAS 방식(LSE atomic 명령 채용)으로 구현&lt;/li>
&lt;/ol>
&lt;h3 id="참조">참조&lt;/h3>
&lt;p>&lt;a href="http://jake.dothome.co.kr/atomic/">http://jake.dothome.co.kr/atomic/&lt;/a>&lt;/p></description></item><item><title>Kernel-Study-2019-11-16</title><link>/posts/kernel-study-2019-11-16/</link><pubDate>Sat, 16 Nov 2019 15:40:00 +0900</pubDate><guid>/posts/kernel-study-2019-11-16/</guid><description>&lt;h2 id="주요-코드">주요 코드&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-C" data-lang="C">&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">inline&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">arch_local_irq_disable&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span>)
{
&lt;span style="color:#66d9ef">asm&lt;/span> &lt;span style="color:#66d9ef">volatile&lt;/span>(ALTERNATIVE(
&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">msr daifset, #2 // arch_local_irq_disable&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>,
&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">msr_s &lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> __stringify(SYS_ICC_PMR_EL1) &lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">, %0&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>,
ARM64_HAS_IRQ_PRIO_MASKING)
&lt;span style="color:#f92672">:&lt;/span>
&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">r&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> ((&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span>) GIC_PRIO_IRQOFF)
&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">memory&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="daif-레지스터">DAIF 레지스터&lt;/h2>
&lt;p>Interrupt Mask Bit. interrupt mask bits에 억세스 할 수 있도록 한다.&lt;br>
ARMv8-A_Architecture_Reference_Manual_(Issue_A.a) - C4.3.2&lt;/p>
&lt;figure>&lt;a href="/images/daif-1.png">
&lt;img src="/images/daif-1.png"/> &lt;/a>
&lt;/figure>
&lt;figure>&lt;a href="/images/daif-2.png">
&lt;img src="/images/daif-2.png"/> &lt;/a>
&lt;/figure>
&lt;h3 id="pstate-fields-접근-명령">PSTATE fields 접근 명령&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>daifset&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">MSR DAIFSet, #Imm4 ; Used to set any or all of DAIF to 1
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="alternative-매크로">ALTERNATIVE 매크로&lt;/h2>
&lt;p>ARM에서는 ALTERNATIVE 기능이 적용되지 않았다.&lt;br>
ARM64의 경우 ARMv8.1 코드와 ARMv8.2 코드를 준비해두고 부트업시&lt;br>
cpu capabilities(features)를 확인하여 가능하면 성능이 더 좋은&lt;br>
ARMv8.2 코드로 replacement 하도록 사용한다.&lt;/p>
&lt;h2 id="asm-volatile-사용법">asm volatile 사용법&lt;/h2>
&lt;p>kernel 코드에서 자주 나오는 inline asembly이다&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-c" data-lang="c">__asm__ &lt;span style="color:#a6e22e">__volatile__&lt;/span> (asms : output : input : clobber);
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>asm&lt;br>
다음에 나오는 것이 인라인 어샘블리 임을 나타낸다&lt;/p>
&lt;/li>
&lt;li>
&lt;p>volatile&lt;br>
최적화를 하지 않는다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>asms&lt;br>
따옴표로 둘러싸인 어셈블리 코드. %x 와 같은 형태로 input, output&lt;br>
파라메터 사용&lt;/p>
&lt;/li>
&lt;li>
&lt;p>output&lt;br>
결과값을 출력하는 변수. 쉼표로 구분&lt;/p>
&lt;/li>
&lt;li>
&lt;p>input&lt;br>
인라인 어셈블리 코드에 넘겨주는 파라메터&lt;/p>
&lt;/li>
&lt;li>
&lt;p>clobber&lt;br>
값이 바뀌는 레지스터. 각 변수는 쉼표로 구분되고 각각을 따옴표로 감싼다.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>output input clobber 는 마지막이 없으면 앞의 &amp;lsquo;:&amp;lsquo;를 생략할 수있으나 중간에 것이 없으면 반드시 콜론을 표기 해야 한다.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-asm" data-lang="asm">&lt;span style="color:#75715e">#include &amp;lt;stdio.h&amp;gt;
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#a6e22e">int&lt;/span> &lt;span style="color:#66d9ef">main&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span>)
&lt;span style="color:#960050;background-color:#1e0010">{&lt;/span>
&lt;span style="color:#a6e22e">unsigned&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#66d9ef">a&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">=&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>&lt;span style="color:#75715e">;
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#66d9ef">b&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">=&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>&lt;span style="color:#75715e">;
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#66d9ef">sum&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#75715e">;
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#a6e22e">__asm__&lt;/span>(&lt;span style="color:#960050;background-color:#1e0010">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">addq&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">%&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#960050;background-color:#1e0010">%&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;#34;&lt;/span> : &lt;span style="color:#960050;background-color:#1e0010">&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">=&lt;/span>&lt;span style="color:#66d9ef">r&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;#34;&lt;/span> (&lt;span style="color:#66d9ef">sum&lt;/span>) : &lt;span style="color:#960050;background-color:#1e0010">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">r&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;#34;&lt;/span> (&lt;span style="color:#66d9ef">a&lt;/span>), &lt;span style="color:#960050;background-color:#1e0010">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;#34;&lt;/span> (&lt;span style="color:#66d9ef">b&lt;/span>))&lt;span style="color:#75715e">;
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">printf&lt;/span>(&lt;span style="color:#960050;background-color:#1e0010">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">a&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">+&lt;/span> &lt;span style="color:#66d9ef">b&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">=&lt;/span> %lu&lt;span style="color:#960050;background-color:#1e0010">\&lt;/span>&lt;span style="color:#66d9ef">n&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">sum&lt;/span>)&lt;span style="color:#75715e">;
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#75715e">;
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>__asm__(&amp;ldquo;addq %1,%2&amp;rdquo; : &amp;ldquo;=r&amp;rdquo; (sum) : &amp;ldquo;r&amp;rdquo; (a), &amp;ldquo;0&amp;rdquo; (b));&lt;br>
위 코드에서 asm 부분만 따로 떼어 내서 분석해 보면&lt;/p>
&lt;h3 id="어셈블리-코드">어셈블리 코드&lt;/h3>
&lt;p>&amp;ldquo;addq %1,%2&amp;rdquo;&lt;br>
%1,%2 는 output operands 부터 좌측에서 순서대로 0번 부터 매겨지는레지스터 변수의 순서이다.&lt;br>
위의 경우는 sum 부분의 레지스터가 0번이다. 그리고 a는 1, b는 2 번순으로 된다. b의 경우는 다시 &amp;ldquo;0&amp;quot;으로 표기하여 output 의 0번째&lt;br>
sum 부분 레지스터를 사용하게 되어 sum 부분 레지스터는 재사용하게 된다.&lt;/p>
&lt;h3 id="input-operands--입력-인수--and-output-operands--출력-인수">Input Operands(입력 인수) &amp;amp; Output Operands(출력 인수)&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>형식&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">[ [asmSymbolicName] ] constraint (C-expression)
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h4 id="asmsymbolicname">asmSymbolicName&lt;/h4>
&lt;p>생략 가능하고 지정하는 경우 %0, %1, …과 같이 인수의 순번을사용하는 대신 심볼명을 사용할 수도 있다.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-asm" data-lang="asm">&lt;span style="color:#a6e22e">asm&lt;/span> (&lt;span style="color:#960050;background-color:#1e0010">“&lt;/span>&lt;span style="color:#66d9ef">add&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">%&lt;/span>[&lt;span style="color:#66d9ef">tmp&lt;/span>], &lt;span style="color:#75715e">#2” : [tmp] “=r” (tmp));
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="constraint">constraint&lt;/h4>
&lt;p>&amp;ldquo;=r&amp;rdquo; 또는 &amp;ldquo;0&amp;rdquo;&lt;/p>
&lt;p>&lt;code>=r&lt;/code> 에서 &lt;code>=&lt;/code> 은 modifier 가 되고 r이 일반 레지스터를나타내는 contraint 이다.&lt;/p>
&lt;ol>
&lt;li>&amp;lsquo;r&amp;rsquo; - 일반 레지스터&lt;/li>
&lt;li>&amp;lsquo;m&amp;rsquo; - 유효 메모리 주소&lt;/li>
&lt;li>&amp;lsquo;[digits]&amp;rsquo; - Output Operands에서 숫자 번째 항목&lt;/li>
&lt;/ol>
&lt;h4 id="modifier">modifier&lt;/h4>
&lt;ol>
&lt;li>&amp;lsquo;=&amp;rsquo; - 쓰기 전용&lt;/li>
&lt;li>&amp;lsquo;+&amp;rsquo; - 읽기 쓰기&lt;/li>
&lt;li>&amp;lsquo;&amp;amp;&amp;rsquo; - OutputOperands에서 레지스터 할당 순서를 먼저 할 수있도록 요청.&lt;br>
보통 input operands에 레지스터를 할당하고 그 후&lt;br>
output operands의 레지스터를 사용하기 때문에 input operands에서사용했던 레지스터를 output operands 레지스터로 배치하는경우도 생기는데 그러면서 문제가 될 수 있는 곳에 사용&lt;/li>
&lt;/ol>
&lt;h2 id="참조">참조&lt;/h2>
&lt;p>&lt;a href="https://wiki.kldp.org/KoreanDoc/html/EmbeddedKernel-KLDP/app3.basic.html">kldp&lt;/a>&lt;br>
&lt;a href="https://0xax.gitbooks.io/linux-insides/content/Theory/linux-theory-3.html?q=">linux inside&lt;/a>&lt;br>
&lt;a href="http://jake.dothome.co.kr/inline-assembly/">http://jake.dothome.co.kr/inline-assembly/&lt;/a>&lt;/p></description></item><item><title>hugo 사용법</title><link>/posts/hugo-%EC%82%AC%EC%9A%A9%EB%B2%95/</link><pubDate>Thu, 14 Nov 2019 00:00:00 +0900</pubDate><guid>/posts/hugo-%EC%82%AC%EC%9A%A9%EB%B2%95/</guid><description>&lt;h2 id="설치">&lt;!-- raw HTML omitted -->1&lt;!-- raw HTML omitted --> 설치&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">$ brew install hugo
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="업그레이드">&lt;!-- raw HTML omitted -->2&lt;!-- raw HTML omitted --> 업그레이드&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">$ brew upgrade hugo
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="사이트-생성">&lt;!-- raw HTML omitted -->3&lt;!-- raw HTML omitted --> 사이트 생성&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">$ hugo new site hugo
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="테마-적용">&lt;!-- raw HTML omitted -->4&lt;!-- raw HTML omitted --> 테마 적용&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>테마 파일을 선택한 뒤 submodule 로 받아온다.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">$ cd hugo
$ git init
$ git submodule add https://github.com/digitalcraftsman/hugo-cactus-theme.git themes/cactus
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>config.toml 파일에서 받아온 theme을 설정한다.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">$ cat config.toml
baseURL = &amp;#34;http://ybgwon.github.io/&amp;#34;
languageCode = &amp;#34;ko-kr&amp;#34;
title = &amp;#34;YB Gwon&amp;#39;s ...&amp;#34;
theme = &amp;#34;cactus&amp;#34;
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;h2 id="콘텐츠-추가">&lt;!-- raw HTML omitted -->5&lt;!-- raw HTML omitted --> 콘텐츠 추가&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">$ hugo new posts/first.org
&lt;/code>&lt;/pre>&lt;/div>&lt;p>content/posts/first.org 파일 생성됨&lt;/p>
&lt;h2 id="테스트">&lt;!-- raw HTML omitted -->6&lt;!-- raw HTML omitted --> 테스트&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">$ hugo server -D
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="http://localhost:1313/">http://localhost:1313/&lt;/a> 으로 연결&lt;/p>
&lt;h2 id="build-static-page">&lt;!-- raw HTML omitted -->7&lt;!-- raw HTML omitted --> build static page&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">$ hugo -D
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="github-actions-for-hugo">&lt;!-- raw HTML omitted -->8&lt;!-- raw HTML omitted --> GitHub Actions for Hugo&lt;/h2>
&lt;p>github action을 사용하면 hugo 소스만 관리하면 build는 자동화 할 수있다.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>ssh key 생성&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">ssh-keygen -t rsa -b &lt;span style="color:#ae81ff">4096&lt;/span> -C &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>git config user.email&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> -f gh-pages -N &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
&lt;span style="color:#75715e"># You will get 2 files:&lt;/span>
&lt;span style="color:#75715e"># gh-pages.pub (public key)&lt;/span>
&lt;span style="color:#75715e"># gh-pages (private key)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>github 저장소 설정 페이지 에서 아래 설정&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Deploy keys 에 위에서 만든 public key 복사(allow write access&lt;br>
check)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Secrets 에 위에서 만든 private key 복사 (이름을 ACTIONS_DEPLOY_KEY로)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>로컬 hugo 저장소의 .github/workflows/gh-pages.yml 작성&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">name: github pages
on:
push:
branches:
​ - src
jobs:
build-deploy:
runs-on: ubuntu&lt;span style="color:#ae81ff">-18.04&lt;/span>
steps:
​ - uses: actions/checkout@v1
with:
submodules: &lt;span style="color:#66d9ef">true&lt;/span>
​
- name: Setup Hugo
uses: peaceiris/actions-hugo@v2
with:
hugo-version: &lt;span style="color:#e6db74">&amp;#39;0.60.1&amp;#39;&lt;/span>
extended: &lt;span style="color:#66d9ef">true&lt;/span>
​
- name: Build
run: hugo --minify
​
- name: Deploy
uses: peaceiris/actions-gh-pages@v2&lt;span style="color:#ae81ff">.5&lt;/span>&lt;span style="color:#ae81ff">.0&lt;/span>
env:
ACTIONS_DEPLOY_KEY: ${{ secrets.ACTIONS_DEPLOY_KEY }}
PUBLISH_BRANCH: master
PUBLISH_DIR: ./public
&lt;/code>&lt;/pre>&lt;/div>&lt;p>저장소 타입이 project 일때와 User and Organization(url이&lt;br>
username.github.io) 일 때 설정이 다른데 위는 User and&lt;br>
Organization 일 경우다.&lt;br>
src 브랜치에 hugo src를 두고 github에 변경사항을 push 하면&lt;br>
github action에 의해 master 브랜치에 publish 되는 구조다.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="custom-css">&lt;!-- raw HTML omitted -->9&lt;!-- raw HTML omitted --> custom css&lt;/h2>
&lt;p>font family 를 변경하거나 size등을 변경하려고 찾아 보았지만적당한 방법을 찾지 못했다. theme 마다 적용하는 방법이 조금씩 다른것 같다.&lt;br>
kiera theme의 경우 font 변경 방법은 아래와 같다.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>hugo/themes/kiera/layouts/partials/header_includes.html 파일을&lt;br>
hugo/layouts/partials/ 디렉토리에 복사하고 googleapi의 font&lt;br>
family를 변경한다.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">&amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;https://fonts.googleapis.com/css?family=Noto+Sans+KR|Roboto+Slab|Ruda&amp;#34; /&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Noto+Sans+KR 추가함. NanumGothic도 추가 할 수 있는 것으로 보인다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>hugo/themes/kiera/static/css/styles.css 파일을&lt;br>
hugo/static/css/style.css 에 복사하고 font-family 에&lt;br>
Noto Sans KR을 추가한다.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">font-family: &amp;#34;Noto Sans KR&amp;#34;, &amp;#34;Roboto Slab&amp;#34;, serif;
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>config.toml 파일에서 css 파일과 fontbody fontcode 를 지정한다.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">[params]
customCSS = [&amp;#34;css/style.css&amp;#34;] #Optional Customised CSS
fontbody = &amp;#39;Noto Sans KR&amp;#39;
fontcode = &amp;#39;Roboto&amp;#39;
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;h3 id="참조">&lt;!-- raw HTML omitted -->9.1&lt;!-- raw HTML omitted --> 참조&lt;/h3>
&lt;p>&lt;a href="https://github.com/peaceiris/actions-hugo">https://github.com/peaceiris/actions-hugo&lt;/a>&lt;br>
&lt;a href="https://discourse.gohugo.io/t/deploy-hugo-project-to-github-pages-with-github-actions/20725">gohugo.io&lt;/a>&lt;br>
&lt;a href="https://blog.kye.dev/hugo-github-pages-actions/">https://blog.kye.dev/hugo-github-pages-actions/&lt;/a>&lt;/p></description></item><item><title>Style Guide</title><link>/posts/style-guide/</link><pubDate>Tue, 14 Nov 2017 10:57:55 -0500</pubDate><guid>/posts/style-guide/</guid><description>&lt;h1 id="headings">Headings&lt;/h1>
&lt;h1 id="heading-1">Heading 1&lt;/h1>
&lt;h2 id="heading-2">Heading 2&lt;/h2>
&lt;h3 id="heading-3">Heading 3&lt;/h3>
&lt;h4 id="heading-4">Heading 4&lt;/h4>
&lt;h5 id="heading-5">Heading 5&lt;/h5>
&lt;h6 id="heading-6">Heading 6&lt;/h6>
&lt;hr>
&lt;h1 id="headings-with-text">Headings with Text&lt;/h1>
&lt;h1 id="heading-11">Heading 1&lt;/h1>
&lt;p>Lorem ipsum dolor sit amet, adipiscing elit. Nullam dignissim convallis est. Quisque aliquam. Donec faucibus. Nunc iaculis suscipit dui. Nam sit amet sem. Aliquam libero nisi, imperdiet at, tincidunt nec, gravida vehicula, nisl.&lt;/p>
&lt;h2 id="heading-21">Heading 2&lt;/h2>
&lt;p>Lorem ipsum dolor sit amet, adipiscing elit. Nullam dignissim convallis est. Quisque aliquam. Donec faucibus. Nunc iaculis suscipit dui. Nam sit amet sem. Aliquam libero nisi, imperdiet at, tincidunt nec, gravida vehicula, nisl.&lt;/p>
&lt;h3 id="heading-31">Heading 3&lt;/h3>
&lt;p>Lorem ipsum dolor sit amet, adipiscing elit. Nullam dignissim convallis est. Quisque aliquam. Donec faucibus. Nunc iaculis suscipit dui. Nam sit amet sem. Aliquam libero nisi, imperdiet at, tincidunt nec, gravida vehicula, nisl.&lt;/p>
&lt;h4 id="heading-41">Heading 4&lt;/h4>
&lt;p>Lorem ipsum dolor sit amet, adipiscing elit. Nullam dignissim convallis est. Quisque aliquam. Donec faucibus. Nunc iaculis suscipit dui. Nam sit amet sem. Aliquam libero nisi, imperdiet at, tincidunt nec, gravida vehicula, nisl.&lt;/p>
&lt;h5 id="heading-51">Heading 5&lt;/h5>
&lt;p>Lorem ipsum dolor sit amet, adipiscing elit. Nullam dignissim convallis est. Quisque aliquam. Donec faucibus. Nunc iaculis suscipit dui. Nam sit amet sem. Aliquam libero nisi, imperdiet at, tincidunt nec, gravida vehicula, nisl.&lt;/p>
&lt;h6 id="heading-61">Heading 6&lt;/h6>
&lt;p>Lorem ipsum dolor sit amet, adipiscing elit. Nullam dignissim convallis est. Quisque aliquam. Donec faucibus. Nunc iaculis suscipit dui. Nam sit amet sem. Aliquam libero nisi, imperdiet at, tincidunt nec, gravida vehicula, nisl.&lt;/p>
&lt;hr>
&lt;h1 id="block-elements">Block Elements&lt;/h1>
&lt;h2 id="paragraphs-and-images">Paragraphs and Images&lt;/h2>
&lt;p>Moinsen! Der kess 🦄 Lichtspieltheater. Kittchen und Schwedenfilm krakelen blümerant Narr. Das flügge Personenvereinzelungsanlage dengeln. Kleintierzuchtverein und Naschkatze meucheln adrett Himmelfahrtskommando. Der gebeutelt Personenvereinzelungsanlage. Der butterweich Scharlatan. Der gemach Kokolores. Haderlump und Waldschrat abkupfern hanebüchen Lump. Der hochgestochen Stümper. Das Trinkhalle abkupfern der bierernst Eisbein. Die Lametta stibitzen der töricht Prahlhans. Die altbacken Himmelfahrtskommando. Kerbholz und Schürzenjäger erquicken garstig Schlachtschüssel. Jungfer und Herrengedeck auftakeln pompös Schnitzel. Ach du liebes Lottchen!&lt;/p>
&lt;p>Aliquam libero nisi, imperdiet at, tincidunt nec, gravida vehicula, nisl. Praesent mattis, massa quis luctus fermentum, turpis mi volutpat justo, eu volutpat enim diam eget metus. Maecenas ornare tortor.&lt;/p>
&lt;p>&lt;img src="https://placehold.it/350x150" alt="Placeholder Image and Some Alt Text" title="A title element for this placeholder image.">&lt;/p>
&lt;p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Nullam dignissim convallis est. Quisque aliquam. Donec faucibus. Nunc iaculis suscipit dui. Nam sit amet sem.&lt;/p>
&lt;h2 id="blockquote">Blockquote&lt;/h2>
&lt;p>This is a standard paragraph. Lorem ipsum dolor sit amet, consectetuer adipiscing elit.&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;&lt;strong>This is a blockquote&lt;/strong>. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Nullam dignissim convallis est. Quisque aliquam. Donec faucibus. Nunc iaculis suscipit dui. Nam sit amet sem. Aliquam libero nisi, imperdiet at, tincidunt nec, gravida vehicula, nisl.&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;p>This is a standard paragraph. Lorem ipsum dolor sit amet, consectetuer adipiscing elit.&lt;/p>
&lt;p>&lt;em>Note: the &lt;a href="http://html5doctor.com/the-figure-figcaption-elements/">Figure-Figcaption&lt;/a> and &lt;a href="http://html5doctor.com/the-details-and-summary-elements/">Details-Summary&lt;/a> elements are not currently supported in markdown.&lt;/em>&lt;/p>
&lt;hr>
&lt;h1 id="text-elements">Text Elements&lt;/h1>
&lt;p>The &lt;a href="#">a element&lt;/a> and &lt;a href="https://example.com">external a element&lt;/a> examples&lt;/p>
&lt;p>The &lt;!-- raw HTML omitted -->abbr element&lt;!-- raw HTML omitted --> and an &lt;!-- raw HTML omitted -->abbr&lt;!-- raw HTML omitted --> element with title examples&lt;/p>
&lt;p>The &lt;!-- raw HTML omitted -->ACRONYM&lt;!-- raw HTML omitted --> element example&lt;/p>
&lt;p>The &lt;strong>b element&lt;/strong> example&lt;/p>
&lt;p>The &lt;!-- raw HTML omitted -->cite element&lt;!-- raw HTML omitted --> example&lt;/p>
&lt;p>The &lt;code>code element&lt;/code> example&lt;/p>
&lt;p>The &lt;!-- raw HTML omitted -->data element&lt;!-- raw HTML omitted --> example&lt;/p>
&lt;p>The &lt;del>del element&lt;/del> example&lt;/p>
&lt;p>The &lt;!-- raw HTML omitted -->dfn element&lt;!-- raw HTML omitted --> and &lt;!-- raw HTML omitted -->dfn element with title&lt;!-- raw HTML omitted --> examples&lt;/p>
&lt;p>The &lt;em>em element&lt;/em> example&lt;/p>
&lt;p>The &lt;em>i element&lt;/em> example&lt;/p>
&lt;p>The &lt;!-- raw HTML omitted -->ins element&lt;!-- raw HTML omitted --> example&lt;/p>
&lt;p>The &lt;!-- raw HTML omitted -->kbd element&lt;!-- raw HTML omitted --> example&lt;/p>
&lt;p>The &lt;!-- raw HTML omitted -->mark element&lt;!-- raw HTML omitted --> example&lt;/p>
&lt;p>The &lt;!-- raw HTML omitted -->q element&lt;!-- raw HTML omitted --> example&lt;/p>
&lt;p>The &lt;!-- raw HTML omitted -->q element &lt;!-- raw HTML omitted -->inside&lt;!-- raw HTML omitted --> a q element&lt;!-- raw HTML omitted --> example&lt;/p>
&lt;p>The &lt;!-- raw HTML omitted -->s element&lt;!-- raw HTML omitted --> example&lt;/p>
&lt;p>The &lt;!-- raw HTML omitted -->samp element&lt;!-- raw HTML omitted --> example&lt;/p>
&lt;p>The &lt;!-- raw HTML omitted -->small element&lt;!-- raw HTML omitted --> example&lt;/p>
&lt;p>The &lt;!-- raw HTML omitted -->span element&lt;!-- raw HTML omitted --> example&lt;/p>
&lt;p>The &lt;strong>strong element&lt;/strong> example&lt;/p>
&lt;p>The &lt;!-- raw HTML omitted -->sub element&lt;!-- raw HTML omitted --> example&lt;/p>
&lt;p>The &lt;!-- raw HTML omitted -->sup element&lt;!-- raw HTML omitted --> example&lt;/p>
&lt;p>The &lt;!-- raw HTML omitted -->time element&lt;!-- raw HTML omitted --> example&lt;/p>
&lt;p>The &lt;!-- raw HTML omitted -->u element&lt;!-- raw HTML omitted --> example&lt;/p>
&lt;p>The &lt;!-- raw HTML omitted -->var element&lt;!-- raw HTML omitted --> example&lt;/p>
&lt;hr>
&lt;h1 id="monospace--preformatted">Monospace / Preformatted&lt;/h1>
&lt;p>Code block wrapped in &amp;ldquo;pre&amp;rdquo; and &amp;ldquo;code&amp;rdquo; tags:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#75715e">// Loop through Divs using Javascript.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">divs&lt;/span> &lt;span style="color:#f92672">=&lt;/span> document.&lt;span style="color:#a6e22e">querySelectorAll&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;div&amp;#39;&lt;/span>), &lt;span style="color:#a6e22e">i&lt;/span>;
&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#a6e22e">divs&lt;/span>.&lt;span style="color:#a6e22e">length&lt;/span>; &lt;span style="color:#f92672">++&lt;/span>&lt;span style="color:#a6e22e">i&lt;/span>) {
&lt;span style="color:#a6e22e">divs&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>].&lt;span style="color:#a6e22e">style&lt;/span>.&lt;span style="color:#a6e22e">color&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;green&amp;#34;&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Monospace Text wrapped in &amp;ldquo;pre&amp;rdquo; tags:&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;hr>
&lt;h1 id="list-types">List Types&lt;/h1>
&lt;h2 id="ordered-list">Ordered List&lt;/h2>
&lt;ol>
&lt;li>List Item 1&lt;/li>
&lt;li>List Item 2&lt;/li>
&lt;li>List Item 3
&lt;ol>
&lt;li>List Item 3.1&lt;/li>
&lt;li>List Item 3.2
&lt;ol>
&lt;li>List Item 3.2.1&lt;/li>
&lt;li>List Item 3.2 2&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>List Item 3.3&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>List Item 4&lt;/li>
&lt;/ol>
&lt;h2 id="unordered-list">Unordered List&lt;/h2>
&lt;ul>
&lt;li>List Item 1&lt;/li>
&lt;li>List Item 2&lt;/li>
&lt;li>List Item 3
&lt;ul>
&lt;li>List Item 3.1
&lt;ul>
&lt;li>List Item 3.2
&lt;ul>
&lt;li>List Item 3.2.1&lt;/li>
&lt;li>List Item 3.2 2&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>List Item 3.3&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>List Item 4&lt;/li>
&lt;/ul>
&lt;h2 id="definition-list">Definition List&lt;/h2>
&lt;dl>
&lt;dt>Definition Term 1&lt;/dt>
&lt;dd>Definition Description 1&lt;/dd>
&lt;dt>Definition Term 2&lt;/dt>
&lt;dd>Definition Description 2&lt;/dd>
&lt;/dl>
&lt;hr>
&lt;h1 id="tables">Tables&lt;/h1>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Table Header 1&lt;/th>
&lt;th>Table Header 2&lt;/th>
&lt;th>Table Header 3&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Division 1&lt;/td>
&lt;td>Division 2&lt;/td>
&lt;td>Division 3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Division 1&lt;/td>
&lt;td>Division 2&lt;/td>
&lt;td>Division 3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Division 1&lt;/td>
&lt;td>Division 2&lt;/td>
&lt;td>Division 3&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h1 id="media-and-form-elements">Media and Form Elements&lt;/h1>
&lt;p>The remaining sections contain elements that cannot be represented in markdown. Please consult &lt;a href="https://github.com/bryanbraun/poor-mans-styleguide/blob/gh-pages/index.html">the HTML version&lt;/a>, to see these elements.&lt;/p></description></item><item><title>Image Style Guide</title><link>/posts/image-content/</link><pubDate>Tue, 14 Nov 2017 08:08:17 -0500</pubDate><guid>/posts/image-content/</guid><description>&lt;p>Veniam est eu adipisicing reprehenderit do sit sint elit sint. Tempor laborum ut dolore aliqua. Commodo eu qui sint magna veniam laborum. Ad cupidatat do proident ex veniam amet Lorem. Officia laboris aute fugiat id consequat culpa ullamco labore ea amet ad. Occaecat quis dolor commodo pariatur cillum et id id cupidatat officia.&lt;/p>
&lt;p>Magna incididunt proident cupidatat cupidatat enim consectetur sunt. Ipsum velit aliqua ex ipsum qui labore magna. Ea nisi anim ad culpa Lorem occaecat ex cupidatat duis labore officia dolor.&lt;/p>
&lt;figure class="full">
&lt;img src="http://via.placeholder.com/600x200"
alt="Magna sunt ut ea quis aliqua cupidatat ut quis sit aliqua tempor duis."/> &lt;figcaption>
&lt;p>Magna sunt ut ea quis aliqua cupidatat ut quis sit aliqua tempor duis.&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>Aliqua minim esse velit est non. Ea do irure labore aliquip culpa ex ut sunt anim duis irure. Ex adipisicing deserunt do occaecat. Incididunt esse ea tempor fugiat magna.&lt;/p>
&lt;p>Voluptate elit exercitation aliqua ut elit reprehenderit aliquip anim elit laborum laborum. Elit aute sint nisi labore irure in labore culpa. Fugiat velit fugiat ea reprehenderit. Sint minim amet occaecat eu labore reprehenderit pariatur nulla.&lt;/p>
&lt;figure class="mid">
&lt;img src="http://via.placeholder.com/600x300"
alt="Eu cupidatat ex qui do."/> &lt;figcaption>
&lt;p>Eu cupidatat ex qui do.&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>In deserunt exercitation Lorem est nulla ullamco enim duis consequat tempor minim. Nostrud cillum ex dolore amet qui mollit do in aliquip consequat eiusmod est dolor officia. Exercitation quis cillum voluptate dolore cillum veniam minim voluptate ullamco voluptate reprehenderit deserunt elit. Et cillum sunt labore ad duis officia aute Lorem incididunt commodo ea.&lt;/p>
&lt;p>Deserunt Lorem aliquip dolor et ut adipisicing nisi esse est dolore irure laborum. Excepteur dolor pariatur excepteur deserunt eiusmod laborum. Ad officia ea magna id ex. Laborum enim proident incididunt quis.&lt;/p>
&lt;p>&lt;img src="http://via.placeholder.com/300x400#float-right" alt="floaty mcboaty">&lt;/p>
&lt;p>Elit culpa ad ex aute ullamco dolor anim do labore. Non ex do eiusmod elit occaecat. Adipisicing mollit commodo fugiat qui Lorem cupidatat laboris consectetur. Anim nostrud ullamco excepteur Lorem aliqua ullamco nisi.&lt;/p>
&lt;p>Dolor adipisicing magna cupidatat consequat commodo est deserunt enim amet nulla pariatur mollit. Cupidatat officia veniam adipisicing laboris et ullamco consequat est nisi cupidatat. Quis id cillum excepteur consectetur aute excepteur ipsum magna. In ex pariatur nostrud ipsum aliqua nisi irure Lorem consectetur incididunt incididunt cillum. Fugiat ea Lorem velit voluptate cillum. Sunt incididunt proident nulla ad minim ullamco nostrud non commodo dolor enim cillum ullamco esse.&lt;/p>
&lt;p>&lt;img src="http://via.placeholder.com/300x400#float-left" alt="floaty mcboaty">&lt;/p>
&lt;p>Do pariatur culpa labore dolore nostrud velit nostrud labore adipisicing enim laborum eu eu. Laborum nulla occaecat amet commodo ut velit. Incididunt et officia ex voluptate qui velit amet. Commodo consequat pariatur labore irure id commodo fugiat exercitation incididunt fugiat aliqua ipsum. Enim exercitation quis cillum irure duis nisi ullamco pariatur exercitation cillum amet nostrud aliquip. Adipisicing pariatur incididunt tempor sit pariatur aliquip aliqua pariatur. Eu occaecat fugiat aliqua consectetur velit incididunt nostrud enim.&lt;/p>
&lt;p>Consectetur non dolore duis anim nostrud pariatur. Nisi ad pariatur est fugiat non occaecat excepteur ea amet esse. Id ullamco nisi anim ut eu reprehenderit irure ullamco. Do voluptate dolor est nostrud sit.&lt;/p>
&lt;figure class="float-right">
&lt;img src="http://via.placeholder.com/300x400"
alt="Eu cupidatat ex qui do."/> &lt;figcaption>
&lt;p>Eu cupidatat ex qui do.&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>Irure anim officia nostrud ad veniam reprehenderit incididunt id elit eu id sint ea laboris. Irure esse sit dolore enim nulla consequat esse id esse. Anim consequat reprehenderit incididunt sit. Incididunt incididunt eu ullamco excepteur sit qui id reprehenderit cillum eiusmod velit elit adipisicing. Pariatur et cupidatat quis sint ipsum est non. Anim sit labore ut minim id sint eu incididunt exercitation laborum laborum anim.&lt;/p>
&lt;p>Sit id et irure consectetur veniam do eiusmod. Exercitation veniam labore proident laborum commodo esse culpa laboris ex laboris fugiat. Sunt ut amet tempor eiusmod exercitation laboris in qui tempor mollit culpa mollit. Eu sint consequat consectetur laboris amet dolore do labore ipsum dolor ipsum fugiat. Qui deserunt cillum nostrud dolore tempor reprehenderit reprehenderit reprehenderit.&lt;/p>
&lt;figure class="float">
&lt;img src="http://via.placeholder.com/300x400"
alt="Eu cupidatat ex qui do."/> &lt;figcaption>
&lt;p>Eu cupidatat ex qui do.&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>Enim anim veniam ea officia. Duis fugiat fugiat exercitation voluptate labore est est aliqua dolor incididunt eiusmod veniam. Reprehenderit sunt aute veniam anim qui sunt irure officia duis non aute labore. Aliqua reprehenderit pariatur reprehenderit voluptate excepteur ut amet sit ut duis. Ea exercitation ex ad ut dolor minim.&lt;/p>
&lt;p>Lorem nostrud aute cillum ut veniam deserunt. Est commodo et id ea. Proident incididunt consequat deserunt sit do est duis. Do sint ullamco sunt cillum duis.&lt;/p>
&lt;p>Officia aliqua occaecat ipsum dolore nostrud aliqua laborum do consequat nostrud. Dolor amet non ad excepteur duis Lorem aliqua aute. Lorem reprehenderit do sit minim magna nostrud Lorem officia duis.&lt;/p>
&lt;p>Ad amet laboris eu qui ipsum eu ut cillum ipsum consectetur mollit nulla aliqua esse. Adipisicing et ad anim ipsum aliqua duis eiusmod. Quis ad in ea eu amet cupidatat sint eiusmod ullamco. Ullamco aliquip Lorem aliqua labore ipsum. Consectetur magna nostrud mollit nulla nostrud duis ipsum. Officia ad nulla culpa exercitation exercitation exercitation duis ipsum laboris.&lt;/p></description></item><item><title>Creating a New Theme</title><link>/posts/creating-a-new-theme/</link><pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate><guid>/posts/creating-a-new-theme/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I'll explain how Hugo uses templates and how you can organize your templates to create a theme. I won't cover using CSS to style your theme.&lt;/p>
&lt;p>We'll start with creating a new site with a very basic template. Then we'll add in a few pages and posts. With small variations on that, you will be able to create many different types of web sites.&lt;/p>
&lt;p>In this tutorial, commands that you enter will start with the &amp;ldquo;$&amp;rdquo; prompt. The output will follow. Lines that start with &amp;ldquo;#&amp;rdquo; are comments that I've added to explain a point. When I show updates to a file, the &amp;ldquo;:wq&amp;rdquo; on the last line means to save the file.&lt;/p>
&lt;p>Here's an example:&lt;/p>
&lt;pre>&lt;code>## this is a comment
$ echo this is a command
this is a command
## edit the file
$vi foo.md
+++
date = &amp;quot;2014-09-28&amp;quot;
title = &amp;quot;creating a new theme&amp;quot;
+++
bah and humbug
:wq
## show it
$ cat foo.md
+++
date = &amp;quot;2014-09-28&amp;quot;
title = &amp;quot;creating a new theme&amp;quot;
+++
bah and humbug
$
&lt;/code>&lt;/pre>&lt;h2 id="some-definitions">Some Definitions&lt;/h2>
&lt;p>There are a few concepts that you need to understand before creating a theme.&lt;/p>
&lt;h3 id="skins">Skins&lt;/h3>
&lt;p>Skins are the files responsible for the look and feel of your site. It’s the CSS that controls colors and fonts, it’s the Javascript that determines actions and reactions. It’s also the rules that Hugo uses to transform your content into the HTML that the site will serve to visitors.&lt;/p>
&lt;p>You have two ways to create a skin. The simplest way is to create it in the &lt;code>layouts/&lt;/code> directory. If you do, then you don’t have to worry about configuring Hugo to recognize it. The first place that Hugo will look for rules and files is in the &lt;code>layouts/&lt;/code> directory so it will always find the skin.&lt;/p>
&lt;p>Your second choice is to create it in a sub-directory of the &lt;code>themes/&lt;/code> directory. If you do, then you must always tell Hugo where to search for the skin. It’s extra work, though, so why bother with it?&lt;/p>
&lt;p>The difference between creating a skin in &lt;code>layouts/&lt;/code> and creating it in &lt;code>themes/&lt;/code> is very subtle. A skin in &lt;code>layouts/&lt;/code> can’t be customized without updating the templates and static files that it is built from. A skin created in &lt;code>themes/&lt;/code>, on the other hand, can be and that makes it easier for other people to use it.&lt;/p>
&lt;p>The rest of this tutorial will call a skin created in the &lt;code>themes/&lt;/code> directory a theme.&lt;/p>
&lt;p>Note that you can use this tutorial to create a skin in the &lt;code>layouts/&lt;/code> directory if you wish to. The main difference will be that you won’t need to update the site’s configuration file to use a theme.&lt;/p>
&lt;h3 id="the-home-page">The Home Page&lt;/h3>
&lt;p>The home page, or landing page, is the first page that many visitors to a site see. It is the index.html file in the root directory of the web site. Since Hugo writes files to the public/ directory, our home page is public/index.html.&lt;/p>
&lt;h3 id="site-configuration-file">Site Configuration File&lt;/h3>
&lt;p>When Hugo runs, it looks for a configuration file that contains settings that override default values for the entire site. The file can use TOML, YAML, or JSON. I prefer to use TOML for my configuration files. If you prefer to use JSON or YAML, you’ll need to translate my examples. You’ll also need to change the name of the file since Hugo uses the extension to determine how to process it.&lt;/p>
&lt;p>Hugo translates Markdown files into HTML. By default, Hugo expects to find Markdown files in your &lt;code>content/&lt;/code> directory and template files in your &lt;code>themes/&lt;/code> directory. It will create HTML files in your &lt;code>public/&lt;/code> directory. You can change this by specifying alternate locations in the configuration file.&lt;/p>
&lt;h3 id="content">Content&lt;/h3>
&lt;p>Content is stored in text files that contain two sections. The first section is the “front matter,” which is the meta-information on the content. The second section contains Markdown that will be converted to HTML.&lt;/p>
&lt;h4 id="front-matter">Front Matter&lt;/h4>
&lt;p>The front matter is information about the content. Like the configuration file, it can be written in TOML, YAML, or JSON. Unlike the configuration file, Hugo doesn’t use the file’s extension to know the format. It looks for markers to signal the type. TOML is surrounded by “&lt;code>+++&lt;/code>”, YAML by “&lt;code>---&lt;/code>”, and JSON is enclosed in curly braces. I prefer to use TOML, so you’ll need to translate my examples if you prefer YAML or JSON.&lt;/p>
&lt;p>The information in the front matter is passed into the template before the content is rendered into HTML.&lt;/p>
&lt;h4 id="markdown">Markdown&lt;/h4>
&lt;p>Content is written in Markdown which makes it easier to create the content. Hugo runs the content through a Markdown engine to create the HTML which will be written to the output file.&lt;/p>
&lt;h3 id="template-files">Template Files&lt;/h3>
&lt;p>Hugo uses template files to render content into HTML. Template files are a bridge between the content and presentation. Rules in the template define what content is published, where it's published to, and how it will rendered to the HTML file. The template guides the presentation by specifying the style to use.&lt;/p>
&lt;p>There are three types of templates: single, list, and partial. Each type takes a bit of content as input and transforms it based on the commands in the template.&lt;/p>
&lt;p>Hugo uses its knowledge of the content to find the template file used to render the content. If it can’t find a template that is an exact match for the content, it will shift up a level and search from there. It will continue to do so until it finds a matching template or runs out of templates to try. If it can’t find a template, it will use the default template for the site.&lt;/p>
&lt;p>Please note that you can use the front matter to influence Hugo’s choice of templates.&lt;/p>
&lt;h4 id="single-template">Single Template&lt;/h4>
&lt;p>A single template is used to render a single piece of content. For example, an article or post would be a single piece of content and use a single template.&lt;/p>
&lt;h4 id="list-template">List Template&lt;/h4>
&lt;p>A list template renders a group of related content. That could be a summary of recent postings or all articles in a category. List templates can contain multiple groups.&lt;/p>
&lt;p>The homepage template is a special type of list template. Hugo assumes that the home page of your site will act as the portal for the rest of the content in the site.&lt;/p>
&lt;h4 id="partial-template">Partial Template&lt;/h4>
&lt;p>A partial template is a template that can be included in other templates. Partial templates must be called using the “partial” template command. They are very handy for rolling up common behavior. For example, your site may have a banner that all pages use. Instead of copying the text of the banner into every single and list template, you could create a partial with the banner in it. That way if you decide to change the banner, you only have to change the partial template.&lt;/p>
&lt;h2 id="create-a-new-site">Create a New Site&lt;/h2>
&lt;p>Let's use Hugo to create a new web site. I'm a Mac user, so I'll create mine in my home directory, in the Sites folder. If you're using Linux, you might have to create the folder first.&lt;/p>
&lt;p>The &amp;ldquo;new site&amp;rdquo; command will create a skeleton of a site. It will give you the basic directory structure and a useable configuration file.&lt;/p>
&lt;pre>&lt;code>$ hugo new site ~/Sites/zafta
$ cd ~/Sites/zafta
$ ls -l
total 8
drwxr-xr-x 7 quoha staff 238 Sep 29 16:49 .
drwxr-xr-x 3 quoha staff 102 Sep 29 16:49 ..
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes
-rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static
$
&lt;/code>&lt;/pre>&lt;p>Take a look in the content/ directory to confirm that it is empty.&lt;/p>
&lt;p>The other directories (archetypes/, layouts/, and static/) are used when customizing a theme. That's a topic for a different tutorial, so please ignore them for now.&lt;/p>
&lt;h3 id="generate-the-html-for-the-new-site">Generate the HTML For the New Site&lt;/h3>
&lt;p>Running the &lt;code>hugo&lt;/code> command with no options will read all the available content and generate the HTML files. It will also copy all static files (that's everything that's not content). Since we have an empty site, it won't do much, but it will do it very quickly.&lt;/p>
&lt;pre>&lt;code>$ hugo --verbose
INFO: 2014/09/29 Using config file: config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]
WARN: 2014/09/29 Unable to locate layout: [404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 2 ms
$
&lt;/code>&lt;/pre>&lt;p>The &amp;ldquo;&lt;code>--verbose&lt;/code>&amp;rdquo; flag gives extra information that will be helpful when we build the template. Every line of the output that starts with &amp;ldquo;INFO:&amp;rdquo; or &amp;ldquo;WARN:&amp;rdquo; is present because we used that flag. The lines that start with &amp;ldquo;WARN:&amp;rdquo; are warning messages. We'll go over them later.&lt;/p>
&lt;p>We can verify that the command worked by looking at the directory again.&lt;/p>
&lt;pre>&lt;code>$ ls -l
total 8
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes
-rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts
drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static
$
&lt;/code>&lt;/pre>&lt;p>See that new public/ directory? Hugo placed all generated content there. When you're ready to publish your web site, that's the place to start. For now, though, let's just confirm that we have what we'd expect from a site with no content.&lt;/p>
&lt;pre>&lt;code>$ ls -l public
total 16
-rw-r--r-- 1 quoha staff 416 Sep 29 17:02 index.xml
-rw-r--r-- 1 quoha staff 262 Sep 29 17:02 sitemap.xml
$
&lt;/code>&lt;/pre>&lt;p>Hugo created two XML files, which is standard, but there are no HTML files.&lt;/p>
&lt;h3 id="test-the-new-site">Test the New Site&lt;/h3>
&lt;p>Verify that you can run the built-in web server. It will dramatically shorten your development cycle if you do. Start it by running the &amp;ldquo;server&amp;rdquo; command. If it is successful, you will see output similar to the following:&lt;/p>
&lt;pre>&lt;code>$ hugo server --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]
WARN: 2014/09/29 Unable to locate layout: [404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 2 ms
Serving pages from /Users/quoha/Sites/zafta/public
Web Server is available at http://localhost:1313
Press Ctrl+C to stop
&lt;/code>&lt;/pre>&lt;p>Connect to the listed URL (it's on the line that starts with &amp;ldquo;Web Server&amp;rdquo;). If everything is working correctly, you should get a page that shows the following:&lt;/p>
&lt;pre>&lt;code>index.xml
sitemap.xml
&lt;/code>&lt;/pre>&lt;p>That's a listing of your public/ directory. Hugo didn't create a home page because our site has no content. When there's no index.html file in a directory, the server lists the files in the directory, which is what you should see in your browser.&lt;/p>
&lt;p>Let’s go back and look at those warnings again.&lt;/p>
&lt;pre>&lt;code>WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]
WARN: 2014/09/29 Unable to locate layout: [404.html]
&lt;/code>&lt;/pre>&lt;p>That second warning is easier to explain. We haven’t created a template to be used to generate “page not found errors.” The 404 message is a topic for a separate tutorial.&lt;/p>
&lt;p>Now for the first warning. It is for the home page. You can tell because the first layout that it looked for was “index.html.” That’s only used by the home page.&lt;/p>
&lt;p>I like that the verbose flag causes Hugo to list the files that it's searching for. For the home page, they are index.html, _default/list.html, and _default/single.html. There are some rules that we'll cover later that explain the names and paths. For now, just remember that Hugo couldn't find a template for the home page and it told you so.&lt;/p>
&lt;p>At this point, you've got a working installation and site that we can build upon. All that’s left is to add some content and a theme to display it.&lt;/p>
&lt;h2 id="create-a-new-theme">Create a New Theme&lt;/h2>
&lt;p>Hugo doesn't ship with a default theme. There are a few available (I counted a dozen when I first installed Hugo) and Hugo comes with a command to create new themes.&lt;/p>
&lt;p>We're going to create a new theme called &amp;ldquo;zafta.&amp;rdquo; Since the goal of this tutorial is to show you how to fill out the files to pull in your content, the theme will not contain any CSS. In other words, ugly but functional.&lt;/p>
&lt;p>All themes have opinions on content and layout. For example, Zafta uses &amp;ldquo;post&amp;rdquo; over &amp;ldquo;blog&amp;rdquo;. Strong opinions make for simpler templates but differing opinions make it tougher to use themes. When you build a theme, consider using the terms that other themes do.&lt;/p>
&lt;h3 id="create-a-skeleton">Create a Skeleton&lt;/h3>
&lt;p>Use the hugo &amp;ldquo;new&amp;rdquo; command to create the skeleton of a theme. This creates the directory structure and places empty files for you to fill out.&lt;/p>
&lt;pre>&lt;code>$ hugo new theme zafta
$ ls -l
total 8
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes
-rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts
drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public
drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static
drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes
$ find themes -type f | xargs ls -l
-rw-r--r-- 1 quoha staff 1081 Sep 29 17:31 themes/zafta/LICENSE.md
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/archetypes/default.md
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html
-rw-r--r-- 1 quoha staff 93 Sep 29 17:31 themes/zafta/theme.toml
$
&lt;/code>&lt;/pre>&lt;p>The skeleton includes templates (the files ending in .html), license file, a description of your theme (the theme.toml file), and an empty archetype.&lt;/p>
&lt;p>Please take a minute to fill out the theme.toml and LICENSE.md files. They're optional, but if you're going to be distributing your theme, it tells the world who to praise (or blame). It's also nice to declare the license so that people will know how they can use the theme.&lt;/p>
&lt;pre>&lt;code>$ vi themes/zafta/theme.toml
author = &amp;quot;michael d henderson&amp;quot;
description = &amp;quot;a minimal working template&amp;quot;
license = &amp;quot;MIT&amp;quot;
name = &amp;quot;zafta&amp;quot;
source_repo = &amp;quot;&amp;quot;
tags = [&amp;quot;tags&amp;quot;, &amp;quot;categories&amp;quot;]
:wq
## also edit themes/zafta/LICENSE.md and change
## the bit that says &amp;quot;YOUR_NAME_HERE&amp;quot;
&lt;/code>&lt;/pre>&lt;p>Note that the the skeleton's template files are empty. Don't worry, we'll be changing that shortly.&lt;/p>
&lt;pre>&lt;code>$ find themes/zafta -name '*.html' | xargs ls -l
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html
$
&lt;/code>&lt;/pre>&lt;h3 id="update-the-configuration-file-to-use-the-theme">Update the Configuration File to Use the Theme&lt;/h3>
&lt;p>Now that we've got a theme to work with, it's a good idea to add the theme name to the configuration file. This is optional, because you can always add &amp;ldquo;-t zafta&amp;rdquo; on all your commands. I like to put it the configuration file because I like shorter command lines. If you don't put it in the configuration file or specify it on the command line, you won't use the template that you're expecting to.&lt;/p>
&lt;p>Edit the file to add the theme, add a title for the site, and specify that all of our content will use the TOML format.&lt;/p>
&lt;pre>&lt;code>$ vi config.toml
theme = &amp;quot;zafta&amp;quot;
baseurl = &amp;quot;&amp;quot;
languageCode = &amp;quot;en-us&amp;quot;
title = &amp;quot;zafta - totally refreshing&amp;quot;
MetaDataFormat = &amp;quot;toml&amp;quot;
:wq
$
&lt;/code>&lt;/pre>&lt;h3 id="generate-the-site">Generate the Site&lt;/h3>
&lt;p>Now that we have an empty theme, let's generate the site again.&lt;/p>
&lt;pre>&lt;code>$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 2 ms
$
&lt;/code>&lt;/pre>&lt;p>Did you notice that the output is different? The warning message for the home page has disappeared and we have an additional information line saying that Hugo is syncing from the theme's directory.&lt;/p>
&lt;p>Let's check the public/ directory to see what Hugo's created.&lt;/p>
&lt;pre>&lt;code>$ ls -l public
total 16
drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 css
-rw-r--r-- 1 quoha staff 0 Sep 29 17:56 index.html
-rw-r--r-- 1 quoha staff 407 Sep 29 17:56 index.xml
drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 js
-rw-r--r-- 1 quoha staff 243 Sep 29 17:56 sitemap.xml
$
&lt;/code>&lt;/pre>&lt;p>Notice four things:&lt;/p>
&lt;ol>
&lt;li>Hugo created a home page. This is the file public/index.html.&lt;/li>
&lt;li>Hugo created a css/ directory.&lt;/li>
&lt;li>Hugo created a js/ directory.&lt;/li>
&lt;li>Hugo claimed that it created 0 pages. It created a file and copied over static files, but didn't create any pages. That's because it considers a &amp;ldquo;page&amp;rdquo; to be a file created directly from a content file. It doesn't count things like the index.html files that it creates automatically.&lt;/li>
&lt;/ol>
&lt;h4 id="the-home-page1">The Home Page&lt;/h4>
&lt;p>Hugo supports many different types of templates. The home page is special because it gets its own type of template and its own template file. The file, layouts/index.html, is used to generate the HTML for the home page. The Hugo documentation says that this is the only required template, but that depends. Hugo's warning message shows that it looks for three different templates:&lt;/p>
&lt;pre>&lt;code>WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]
&lt;/code>&lt;/pre>&lt;p>If it can't find any of these, it completely skips creating the home page. We noticed that when we built the site without having a theme installed.&lt;/p>
&lt;p>When Hugo created our theme, it created an empty home page template. Now, when we build the site, Hugo finds the template and uses it to generate the HTML for the home page. Since the template file is empty, the HTML file is empty, too. If the template had any rules in it, then Hugo would have used them to generate the home page.&lt;/p>
&lt;pre>&lt;code>$ find . -name index.html | xargs ls -l
-rw-r--r-- 1 quoha staff 0 Sep 29 20:21 ./public/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 ./themes/zafta/layouts/index.html
$
&lt;/code>&lt;/pre>&lt;h4 id="the-magic-of-static">The Magic of Static&lt;/h4>
&lt;p>Hugo does two things when generating the site. It uses templates to transform content into HTML and it copies static files into the site. Unlike content, static files are not transformed. They are copied exactly as they are.&lt;/p>
&lt;p>Hugo assumes that your site will use both CSS and JavaScript, so it creates directories in your theme to hold them. Remember opinions? Well, Hugo's opinion is that you'll store your CSS in a directory named css/ and your JavaScript in a directory named js/. If you don't like that, you can change the directory names in your theme directory or even delete them completely. Hugo's nice enough to offer its opinion, then behave nicely if you disagree.&lt;/p>
&lt;pre>&lt;code>$ find themes/zafta -type d | xargs ls -ld
drwxr-xr-x 7 quoha staff 238 Sep 29 17:38 themes/zafta
drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes/zafta/archetypes
drwxr-xr-x 5 quoha staff 170 Sep 29 17:31 themes/zafta/layouts
drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/_default
drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/partials
drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/static
drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/css
drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/js
$
&lt;/code>&lt;/pre>&lt;h2 id="the-theme-development-cycle">The Theme Development Cycle&lt;/h2>
&lt;p>When you're working on a theme, you will make changes in the theme's directory, rebuild the site, and check your changes in the browser. Hugo makes this very easy:&lt;/p>
&lt;ol>
&lt;li>Purge the public/ directory.&lt;/li>
&lt;li>Run the built in web server in watch mode.&lt;/li>
&lt;li>Open your site in a browser.&lt;/li>
&lt;li>Update the theme.&lt;/li>
&lt;li>Glance at your browser window to see changes.&lt;/li>
&lt;li>Return to step 4.&lt;/li>
&lt;/ol>
&lt;p>I’ll throw in one more opinion: never work on a theme on a live site. Always work on a copy of your site. Make changes to your theme, test them, then copy them up to your site. For added safety, use a tool like Git to keep a revision history of your content and your theme. Believe me when I say that it is too easy to lose both your mind and your changes.&lt;/p>
&lt;p>Check the main Hugo site for information on using Git with Hugo.&lt;/p>
&lt;h3 id="purge-the-public-directory">Purge the public/ Directory&lt;/h3>
&lt;p>When generating the site, Hugo will create new files and update existing ones in the &lt;code>public/&lt;/code> directory. It will not delete files that are no longer used. For example, files that were created in the wrong directory or with the wrong title will remain. If you leave them, you might get confused by them later. I recommend cleaning out your site prior to generating it.&lt;/p>
&lt;p>Note: If you're building on an SSD, you should ignore this. Churning on a SSD can be costly.&lt;/p>
&lt;h3 id="hugos-watch-option">Hugo's Watch Option&lt;/h3>
&lt;p>Hugo's &amp;ldquo;&lt;code>--watch&lt;/code>&amp;rdquo; option will monitor the content/ and your theme directories for changes and rebuild the site automatically.&lt;/p>
&lt;h3 id="live-reload">Live Reload&lt;/h3>
&lt;p>Hugo's built in web server supports live reload. As pages are saved on the server, the browser is told to refresh the page. Usually, this happens faster than you can say, &amp;ldquo;Wow, that's totally amazing.&amp;rdquo;&lt;/p>
&lt;h3 id="development-commands">Development Commands&lt;/h3>
&lt;p>Use the following commands as the basis for your workflow.&lt;/p>
&lt;pre>&lt;code>## purge old files. hugo will recreate the public directory.
##
$ rm -rf public
##
## run hugo in watch mode
##
$ hugo server --watch --verbose
&lt;/code>&lt;/pre>&lt;p>Here's sample output showing Hugo detecting a change to the template for the home page. Once generated, the web browser automatically reloaded the page. I've said this before, it's amazing.&lt;/p>
&lt;pre>&lt;code>$ rm -rf public
$ hugo server --watch --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 2 ms
Watching for changes in /Users/quoha/Sites/zafta/content
Serving pages from /Users/quoha/Sites/zafta/public
Web Server is available at http://localhost:1313
Press Ctrl+C to stop
INFO: 2014/09/29 File System Event: [&amp;quot;/Users/quoha/Sites/zafta/themes/zafta/layouts/index.html&amp;quot;: MODIFY|ATTRIB]
Change detected, rebuilding site
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 1 ms
&lt;/code>&lt;/pre>&lt;h2 id="update-the-home-page-template">Update the Home Page Template&lt;/h2>
&lt;p>The home page is one of a few special pages that Hugo creates automatically. As mentioned earlier, it looks for one of three files in the theme's layout/ directory:&lt;/p>
&lt;ol>
&lt;li>index.html&lt;/li>
&lt;li>_default/list.html&lt;/li>
&lt;li>_default/single.html&lt;/li>
&lt;/ol>
&lt;p>We could update one of the default templates, but a good design decision is to update the most specific template available. That's not a hard and fast rule (in fact, we'll break it a few times in this tutorial), but it is a good generalization.&lt;/p>
&lt;h3 id="make-a-static-home-page">Make a Static Home Page&lt;/h3>
&lt;p>Right now, that page is empty because we don't have any content and we don't have any logic in the template. Let's change that by adding some text to the template.&lt;/p>
&lt;pre>&lt;code>$ vi themes/zafta/layouts/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;p&amp;gt;hugo says hello!&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
:wq
$
&lt;/code>&lt;/pre>&lt;p>Build the web site and then verify the results.&lt;/p>
&lt;pre>&lt;code>$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 2 ms
$ find public -type f -name '*.html' | xargs ls -l
-rw-r--r-- 1 quoha staff 78 Sep 29 21:26 public/index.html
$ cat public/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;p&amp;gt;hugo says hello!&amp;lt;/p&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>&lt;h4 id="live-reload1">Live Reload&lt;/h4>
&lt;p>Note: If you're running the server with the &lt;code>--watch&lt;/code> option, you'll see different content in the file:&lt;/p>
&lt;pre>&lt;code>$ cat public/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;p&amp;gt;hugo says hello!&amp;lt;/p&amp;gt;
&amp;lt;script&amp;gt;document.write('&amp;lt;script src=&amp;quot;http://'
+ (location.host || 'localhost').split(':')[0]
+ ':1313/livereload.js?mindelay=10&amp;quot;&amp;gt;&amp;lt;/'
+ 'script&amp;gt;')&amp;lt;/script&amp;gt;&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>&lt;p>When you use &lt;code>--watch&lt;/code>, the Live Reload script is added by Hugo. Look for live reload in the documentation to see what it does and how to disable it.&lt;/p>
&lt;h3 id="build-a-dynamic-home-page">Build a &amp;ldquo;Dynamic&amp;rdquo; Home Page&lt;/h3>
&lt;p>&amp;ldquo;Dynamic home page?&amp;rdquo; Hugo's a static web site generator, so this seems an odd thing to say. I mean let's have the home page automatically reflect the content in the site every time Hugo builds it. We'll use iteration in the template to do that.&lt;/p>
&lt;h4 id="create-new-posts">Create New Posts&lt;/h4>
&lt;p>Now that we have the home page generating static content, let's add some content to the site. We'll display these posts as a list on the home page and on their own page, too.&lt;/p>
&lt;p>Hugo has a command to generate a skeleton post, just like it does for sites and themes.&lt;/p>
&lt;pre>&lt;code>$ hugo --verbose new post/first.md
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 attempting to create post/first.md of post
INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/default.md
ERROR: 2014/09/29 Unable to Cast &amp;lt;nil&amp;gt; to map[string]interface{}
$
&lt;/code>&lt;/pre>&lt;p>That wasn't very nice, was it?&lt;/p>
&lt;p>The &amp;ldquo;new&amp;rdquo; command uses an archetype to create the post file. Hugo created an empty default archetype file, but that causes an error when there's a theme. For me, the workaround was to create an archetypes file specifically for the post type.&lt;/p>
&lt;pre>&lt;code>$ vi themes/zafta/archetypes/post.md
+++
Description = &amp;quot;&amp;quot;
Tags = []
Categories = []
+++
:wq
$ find themes/zafta/archetypes -type f | xargs ls -l
-rw-r--r-- 1 quoha staff 0 Sep 29 21:53 themes/zafta/archetypes/default.md
-rw-r--r-- 1 quoha staff 51 Sep 29 21:54 themes/zafta/archetypes/post.md
$ hugo --verbose new post/first.md
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 attempting to create post/first.md of post
INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md
INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/first.md
/Users/quoha/Sites/zafta/content/post/first.md created
$ hugo --verbose new post/second.md
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 attempting to create post/second.md of post
INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md
INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/second.md
/Users/quoha/Sites/zafta/content/post/second.md created
$ ls -l content/post
total 16
-rw-r--r-- 1 quoha staff 104 Sep 29 21:54 first.md
-rw-r--r-- 1 quoha staff 105 Sep 29 21:57 second.md
$ cat content/post/first.md
+++
Categories = []
Description = &amp;quot;&amp;quot;
Tags = []
date = &amp;quot;2014-09-29T21:54:53-05:00&amp;quot;
title = &amp;quot;first&amp;quot;
+++
my first post
$ cat content/post/second.md
+++
Categories = []
Description = &amp;quot;&amp;quot;
Tags = []
date = &amp;quot;2014-09-29T21:57:09-05:00&amp;quot;
title = &amp;quot;second&amp;quot;
+++
my second post
$
&lt;/code>&lt;/pre>&lt;p>Build the web site and then verify the results.&lt;/p>
&lt;pre>&lt;code>$ rm -rf public
$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 found taxonomies: map[string]string{&amp;quot;category&amp;quot;:&amp;quot;categories&amp;quot;, &amp;quot;tag&amp;quot;:&amp;quot;tags&amp;quot;}
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
2 pages created
0 tags created
0 categories created
in 4 ms
$
&lt;/code>&lt;/pre>&lt;p>The output says that it created 2 pages. Those are our new posts:&lt;/p>
&lt;pre>&lt;code>$ find public -type f -name '*.html' | xargs ls -l
-rw-r--r-- 1 quoha staff 78 Sep 29 22:13 public/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/first/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/second/index.html
$
&lt;/code>&lt;/pre>&lt;p>The new files are empty because because the templates used to generate the content are empty. The homepage doesn't show the new content, either. We have to update the templates to add the posts.&lt;/p>
&lt;h3 id="list-and-single-templates">List and Single Templates&lt;/h3>
&lt;p>In Hugo, we have three major kinds of templates. There's the home page template that we updated previously. It is used only by the home page. We also have &amp;ldquo;single&amp;rdquo; templates which are used to generate output for a single content file. We also have &amp;ldquo;list&amp;rdquo; templates that are used to group multiple pieces of content before generating output.&lt;/p>
&lt;p>Generally speaking, list templates are named &amp;ldquo;list.html&amp;rdquo; and single templates are named &amp;ldquo;single.html.&amp;rdquo;&lt;/p>
&lt;p>There are three other types of templates: partials, content views, and terms. We will not go into much detail on these.&lt;/p>
&lt;h3 id="add-content-to-the-homepage">Add Content to the Homepage&lt;/h3>
&lt;p>The home page will contain a list of posts. Let's update its template to add the posts that we just created. The logic in the template will run every time we build the site.&lt;/p>
&lt;pre>&lt;code>$ vi themes/zafta/layouts/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
{{ range first 10 .Data.Pages }}
&amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
{{ end }}
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
:wq
$
&lt;/code>&lt;/pre>&lt;p>Hugo uses the Go template engine. That engine scans the template files for commands which are enclosed between &amp;ldquo;{{&amp;rdquo; and &amp;ldquo;}}&amp;quot;. In our template, the commands are:&lt;/p>
&lt;ol>
&lt;li>range&lt;/li>
&lt;li>.Title&lt;/li>
&lt;li>end&lt;/li>
&lt;/ol>
&lt;p>The &amp;ldquo;range&amp;rdquo; command is an iterator. We're going to use it to go through the first ten pages. Every HTML file that Hugo creates is treated as a page, so looping through the list of pages will look at every file that will be created.&lt;/p>
&lt;p>The &amp;ldquo;.Title&amp;rdquo; command prints the value of the &amp;ldquo;title&amp;rdquo; variable. Hugo pulls it from the front matter in the Markdown file.&lt;/p>
&lt;p>The &amp;ldquo;end&amp;rdquo; command signals the end of the range iterator. The engine loops back to the top of the iteration when it finds &amp;ldquo;end.&amp;rdquo; Everything between the &amp;ldquo;range&amp;rdquo; and &amp;ldquo;end&amp;rdquo; is evaluated every time the engine goes through the iteration. In this file, that would cause the title from the first ten pages to be output as heading level one.&lt;/p>
&lt;p>It's helpful to remember that some variables, like .Data, are created before any output files. Hugo loads every content file into the variable and then gives the template a chance to process before creating the HTML files.&lt;/p>
&lt;p>Build the web site and then verify the results.&lt;/p>
&lt;pre>&lt;code>$ rm -rf public
$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 found taxonomies: map[string]string{&amp;quot;tag&amp;quot;:&amp;quot;tags&amp;quot;, &amp;quot;category&amp;quot;:&amp;quot;categories&amp;quot;}
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
2 pages created
0 tags created
0 categories created
in 4 ms
$ find public -type f -name '*.html' | xargs ls -l
-rw-r--r-- 1 quoha staff 94 Sep 29 22:23 public/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/first/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/second/index.html
$ cat public/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;second&amp;lt;/h1&amp;gt;
&amp;lt;h1&amp;gt;first&amp;lt;/h1&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
$
&lt;/code>&lt;/pre>&lt;p>Congratulations, the home page shows the title of the two posts. The posts themselves are still empty, but let's take a moment to appreciate what we've done. Your template now generates output dynamically. Believe it or not, by inserting the range command inside of those curly braces, you've learned everything you need to know to build a theme. All that's really left is understanding which template will be used to generate each content file and becoming familiar with the commands for the template engine.&lt;/p>
&lt;p>And, if that were entirely true, this tutorial would be much shorter. There are a few things to know that will make creating a new template much easier. Don't worry, though, that's all to come.&lt;/p>
&lt;h3 id="add-content-to-the-posts">Add Content to the Posts&lt;/h3>
&lt;p>We're working with posts, which are in the content/post/ directory. That means that their section is &amp;ldquo;post&amp;rdquo; (and if we don't do something weird, their type is also &amp;ldquo;post&amp;rdquo;).&lt;/p>
&lt;p>Hugo uses the section and type to find the template file for every piece of content. Hugo will first look for a template file that matches the section or type name. If it can't find one, then it will look in the _default/ directory. There are some twists that we'll cover when we get to categories and tags, but for now we can assume that Hugo will try post/single.html, then _default/single.html.&lt;/p>
&lt;p>Now that we know the search rule, let's see what we actually have available:&lt;/p>
&lt;pre>&lt;code>$ find themes/zafta -name single.html | xargs ls -l
-rw-r--r-- 1 quoha staff 132 Sep 29 17:31 themes/zafta/layouts/_default/single.html
&lt;/code>&lt;/pre>&lt;p>We could create a new template, post/single.html, or change the default. Since we don't know of any other content types, let's start with updating the default.&lt;/p>
&lt;p>Remember, any content that we haven't created a template for will end up using this template. That can be good or bad. Bad because I know that we're going to be adding different types of content and we're going to end up undoing some of the changes we've made. It's good because we'll be able to see immediate results. It's also good to start here because we can start to build the basic layout for the site. As we add more content types, we'll refactor this file and move logic around. Hugo makes that fairly painless, so we'll accept the cost and proceed.&lt;/p>
&lt;p>Please see the Hugo documentation on template rendering for all the details on determining which template to use. And, as the docs mention, if you're building a single page application (SPA) web site, you can delete all of the other templates and work with just the default single page. That's a refreshing amount of joy right there.&lt;/p>
&lt;h4 id="update-the-template-file">Update the Template File&lt;/h4>
&lt;pre>&lt;code>$ vi themes/zafta/layouts/_default/single.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;{{ .Title }}&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
{{ .Content }}
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
:wq
$
&lt;/code>&lt;/pre>&lt;p>Build the web site and verify the results.&lt;/p>
&lt;pre>&lt;code>$ rm -rf public
$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 found taxonomies: map[string]string{&amp;quot;tag&amp;quot;:&amp;quot;tags&amp;quot;, &amp;quot;category&amp;quot;:&amp;quot;categories&amp;quot;}
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
2 pages created
0 tags created
0 categories created
in 4 ms
$ find public -type f -name '*.html' | xargs ls -l
-rw-r--r-- 1 quoha staff 94 Sep 29 22:40 public/index.html
-rw-r--r-- 1 quoha staff 125 Sep 29 22:40 public/post/first/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 22:40 public/post/index.html
-rw-r--r-- 1 quoha staff 128 Sep 29 22:40 public/post/second/index.html
$ cat public/post/first/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;first&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;first&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;my first post&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
$ cat public/post/second/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;second&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;second&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;my second post&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
$
&lt;/code>&lt;/pre>&lt;p>Notice that the posts now have content. You can go to localhost:1313/post/first to verify.&lt;/p>
&lt;h3 id="linking-to-content">Linking to Content&lt;/h3>
&lt;p>The posts are on the home page. Let's add a link from there to the post. Since this is the home page, we'll update its template.&lt;/p>
&lt;pre>&lt;code>$ vi themes/zafta/layouts/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
{{ range first 10 .Data.Pages }}
&amp;lt;h1&amp;gt;&amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
{{ end }}
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>&lt;p>Build the web site and verify the results.&lt;/p>
&lt;pre>&lt;code>$ rm -rf public
$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 found taxonomies: map[string]string{&amp;quot;tag&amp;quot;:&amp;quot;tags&amp;quot;, &amp;quot;category&amp;quot;:&amp;quot;categories&amp;quot;}
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
2 pages created
0 tags created
0 categories created
in 4 ms
$ find public -type f -name '*.html' | xargs ls -l
-rw-r--r-- 1 quoha staff 149 Sep 29 22:44 public/index.html
-rw-r--r-- 1 quoha staff 125 Sep 29 22:44 public/post/first/index.html
-rw-r--r-- 1 quoha staff 0 Sep 29 22:44 public/post/index.html
-rw-r--r-- 1 quoha staff 128 Sep 29 22:44 public/post/second/index.html
$ cat public/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;&amp;lt;a href=&amp;quot;/post/second/&amp;quot;&amp;gt;second&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
&amp;lt;h1&amp;gt;&amp;lt;a href=&amp;quot;/post/first/&amp;quot;&amp;gt;first&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
$
&lt;/code>&lt;/pre>&lt;h3 id="create-a-post-listing">Create a Post Listing&lt;/h3>
&lt;p>We have the posts displaying on the home page and on their own page. We also have a file public/post/index.html that is empty. Let's make it show a list of all posts (not just the first ten).&lt;/p>
&lt;p>We need to decide which template to update. This will be a listing, so it should be a list template. Let's take a quick look and see which list templates are available.&lt;/p>
&lt;pre>&lt;code>$ find themes/zafta -name list.html | xargs ls -l
-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html
&lt;/code>&lt;/pre>&lt;p>As with the single post, we have to decide to update _default/list.html or create post/list.html. We still don't have multiple content types, so let's stay consistent and update the default list template.&lt;/p>
&lt;h2 id="creating-top-level-pages">Creating Top Level Pages&lt;/h2>
&lt;p>Let's add an &amp;ldquo;about&amp;rdquo; page and display it at the top level (as opposed to a sub-level like we did with posts).&lt;/p>
&lt;p>The default in Hugo is to use the directory structure of the content/ directory to guide the location of the generated html in the public/ directory. Let's verify that by creating an &amp;ldquo;about&amp;rdquo; page at the top level:&lt;/p>
&lt;pre>&lt;code>$ vi content/about.md
+++
title = &amp;quot;about&amp;quot;
description = &amp;quot;about this site&amp;quot;
date = &amp;quot;2014-09-27&amp;quot;
slug = &amp;quot;about time&amp;quot;
+++
## about us
i'm speechless
:wq
&lt;/code>&lt;/pre>&lt;p>Generate the web site and verify the results.&lt;/p>
&lt;pre>&lt;code>$ find public -name '*.html' | xargs ls -l
-rw-rw-r-- 1 mdhender staff 334 Sep 27 15:08 public/about-time/index.html
-rw-rw-r-- 1 mdhender staff 527 Sep 27 15:08 public/index.html
-rw-rw-r-- 1 mdhender staff 358 Sep 27 15:08 public/post/first-post/index.html
-rw-rw-r-- 1 mdhender staff 0 Sep 27 15:08 public/post/index.html
-rw-rw-r-- 1 mdhender staff 342 Sep 27 15:08 public/post/second-post/index.html
&lt;/code>&lt;/pre>&lt;p>Notice that the page wasn't created at the top level. It was created in a sub-directory named &amp;lsquo;about-time/'. That name came from our slug. Hugo will use the slug to name the generated content. It's a reasonable default, by the way, but we can learn a few things by fighting it for this file.&lt;/p>
&lt;p>One other thing. Take a look at the home page.&lt;/p>
&lt;pre>&lt;code>$ cat public/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;&amp;lt;a href=&amp;quot;http://localhost:1313/post/theme/&amp;quot;&amp;gt;creating a new theme&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
&amp;lt;h1&amp;gt;&amp;lt;a href=&amp;quot;http://localhost:1313/about-time/&amp;quot;&amp;gt;about&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
&amp;lt;h1&amp;gt;&amp;lt;a href=&amp;quot;http://localhost:1313/post/second-post/&amp;quot;&amp;gt;second&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
&amp;lt;h1&amp;gt;&amp;lt;a href=&amp;quot;http://localhost:1313/post/first-post/&amp;quot;&amp;gt;first&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
&amp;lt;script&amp;gt;document.write('&amp;lt;script src=&amp;quot;http://'
+ (location.host || 'localhost').split(':')[0]
+ ':1313/livereload.js?mindelay=10&amp;quot;&amp;gt;&amp;lt;/'
+ 'script&amp;gt;')&amp;lt;/script&amp;gt;&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>&lt;p>Notice that the &amp;ldquo;about&amp;rdquo; link is listed with the posts? That's not desirable, so let's change that first.&lt;/p>
&lt;pre>&lt;code>$ vi themes/zafta/layouts/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;posts&amp;lt;/h1&amp;gt;
{{ range first 10 .Data.Pages }}
{{ if eq .Type &amp;quot;post&amp;quot;}}
&amp;lt;h2&amp;gt;&amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;
{{ end }}
{{ end }}
&amp;lt;h1&amp;gt;pages&amp;lt;/h1&amp;gt;
{{ range .Data.Pages }}
{{ if eq .Type &amp;quot;page&amp;quot; }}
&amp;lt;h2&amp;gt;&amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;
{{ end }}
{{ end }}
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
:wq
&lt;/code>&lt;/pre>&lt;p>Generate the web site and verify the results. The home page has two sections, posts and pages, and each section has the right set of headings and links in it.&lt;/p>
&lt;p>But, that about page still renders to about-time/index.html.&lt;/p>
&lt;pre>&lt;code>$ find public -name '*.html' | xargs ls -l
-rw-rw-r-- 1 mdhender staff 334 Sep 27 15:33 public/about-time/index.html
-rw-rw-r-- 1 mdhender staff 645 Sep 27 15:33 public/index.html
-rw-rw-r-- 1 mdhender staff 358 Sep 27 15:33 public/post/first-post/index.html
-rw-rw-r-- 1 mdhender staff 0 Sep 27 15:33 public/post/index.html
-rw-rw-r-- 1 mdhender staff 342 Sep 27 15:33 public/post/second-post/index.html
&lt;/code>&lt;/pre>&lt;p>Knowing that hugo is using the slug to generate the file name, the simplest solution is to change the slug. Let's do it the hard way and change the permalink in the configuration file.&lt;/p>
&lt;pre>&lt;code>$ vi config.toml
[permalinks]
page = &amp;quot;/:title/&amp;quot;
about = &amp;quot;/:filename/&amp;quot;
&lt;/code>&lt;/pre>&lt;p>Generate the web site and verify that this didn't work. Hugo lets &amp;ldquo;slug&amp;rdquo; or &amp;ldquo;URL&amp;rdquo; override the permalinks setting in the configuration file. Go ahead and comment out the slug in content/about.md, then generate the web site to get it to be created in the right place.&lt;/p>
&lt;h2 id="sharing-templates">Sharing Templates&lt;/h2>
&lt;p>If you've been following along, you probably noticed that posts have titles in the browser and the home page doesn't. That's because we didn't put the title in the home page's template (layouts/index.html). That's an easy thing to do, but let's look at a different option.&lt;/p>
&lt;p>We can put the common bits into a shared template that's stored in the themes/zafta/layouts/partials/ directory.&lt;/p>
&lt;h3 id="create-the-header-and-footer-partials">Create the Header and Footer Partials&lt;/h3>
&lt;p>In Hugo, a partial is a sugar-coated template. Normally a template reference has a path specified. Partials are different. Hugo searches for them along a TODO defined search path. This makes it easier for end-users to override the theme's presentation.&lt;/p>
&lt;pre>&lt;code>$ vi themes/zafta/layouts/partials/header.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;{{ .Title }}&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
:wq
$ vi themes/zafta/layouts/partials/footer.html
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
:wq
&lt;/code>&lt;/pre>&lt;h3 id="update-the-home-page-template-to-use-the-partials">Update the Home Page Template to Use the Partials&lt;/h3>
&lt;p>The most noticeable difference between a template call and a partials call is the lack of path:&lt;/p>
&lt;pre>&lt;code>{{ template &amp;quot;theme/partials/header.html&amp;quot; . }}
&lt;/code>&lt;/pre>&lt;p>versus&lt;/p>
&lt;pre>&lt;code>{{ partial &amp;quot;header.html&amp;quot; . }}
&lt;/code>&lt;/pre>&lt;p>Both pass in the context.&lt;/p>
&lt;p>Let's change the home page template to use these new partials.&lt;/p>
&lt;pre>&lt;code>$ vi themes/zafta/layouts/index.html
{{ partial &amp;quot;header.html&amp;quot; . }}
&amp;lt;h1&amp;gt;posts&amp;lt;/h1&amp;gt;
{{ range first 10 .Data.Pages }}
{{ if eq .Type &amp;quot;post&amp;quot;}}
&amp;lt;h2&amp;gt;&amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;
{{ end }}
{{ end }}
&amp;lt;h1&amp;gt;pages&amp;lt;/h1&amp;gt;
{{ range .Data.Pages }}
{{ if or (eq .Type &amp;quot;page&amp;quot;) (eq .Type &amp;quot;about&amp;quot;) }}
&amp;lt;h2&amp;gt;&amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;{{ .Type }} - {{ .Title }} - {{ .RelPermalink }}&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;
{{ end }}
{{ end }}
{{ partial &amp;quot;footer.html&amp;quot; . }}
:wq
&lt;/code>&lt;/pre>&lt;p>Generate the web site and verify the results. The title on the home page is now &amp;ldquo;your title here&amp;rdquo;, which comes from the &amp;ldquo;title&amp;rdquo; variable in the config.toml file.&lt;/p>
&lt;h3 id="update-the-default-single-template-to-use-the-partials">Update the Default Single Template to Use the Partials&lt;/h3>
&lt;pre>&lt;code>$ vi themes/zafta/layouts/_default/single.html
{{ partial &amp;quot;header.html&amp;quot; . }}
&amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
{{ .Content }}
{{ partial &amp;quot;footer.html&amp;quot; . }}
:wq
&lt;/code>&lt;/pre>&lt;p>Generate the web site and verify the results. The title on the posts and the about page should both reflect the value in the markdown file.&lt;/p>
&lt;h2 id="add-date-published-to-posts">Add “Date Published” to Posts&lt;/h2>
&lt;p>It's common to have posts display the date that they were written or published, so let's add that. The front matter of our posts has a variable named &amp;ldquo;date.&amp;rdquo; It's usually the date the content was created, but let's pretend that's the value we want to display.&lt;/p>
&lt;h3 id="add-date-published-to-the-template">Add “Date Published” to the Template&lt;/h3>
&lt;p>We'll start by updating the template used to render the posts. The template code will look like:&lt;/p>
&lt;pre>&lt;code>{{ .Date.Format &amp;quot;Mon, Jan 2, 2006&amp;quot; }}
&lt;/code>&lt;/pre>&lt;p>Posts use the default single template, so we'll change that file.&lt;/p>
&lt;pre>&lt;code>$ vi themes/zafta/layouts/_default/single.html
{{ partial &amp;quot;header.html&amp;quot; . }}
&amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
&amp;lt;h2&amp;gt;{{ .Date.Format &amp;quot;Mon, Jan 2, 2006&amp;quot; }}&amp;lt;/h2&amp;gt;
{{ .Content }}
{{ partial &amp;quot;footer.html&amp;quot; . }}
:wq
&lt;/code>&lt;/pre>&lt;p>Generate the web site and verify the results. The posts now have the date displayed in them. There's a problem, though. The &amp;ldquo;about&amp;rdquo; page also has the date displayed.&lt;/p>
&lt;p>As usual, there are a couple of ways to make the date display only on posts. We could do an &amp;ldquo;if&amp;rdquo; statement like we did on the home page. Another way would be to create a separate template for posts.&lt;/p>
&lt;p>The &amp;ldquo;if&amp;rdquo; solution works for sites that have just a couple of content types. It aligns with the principle of &amp;ldquo;code for today,&amp;rdquo; too.&lt;/p>
&lt;p>Let's assume, though, that we've made our site so complex that we feel we have to create a new template type. In Hugo-speak, we're going to create a section template.&lt;/p>
&lt;p>Let's restore the default single template before we forget.&lt;/p>
&lt;pre>&lt;code>$ mkdir themes/zafta/layouts/post
$ vi themes/zafta/layouts/_default/single.html
{{ partial &amp;quot;header.html&amp;quot; . }}
&amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
{{ .Content }}
{{ partial &amp;quot;footer.html&amp;quot; . }}
:wq
&lt;/code>&lt;/pre>&lt;p>Now we'll update the post's version of the single template. If you remember Hugo's rules, the template engine will use this version over the default.&lt;/p>
&lt;pre>&lt;code>$ vi themes/zafta/layouts/post/single.html
{{ partial &amp;quot;header.html&amp;quot; . }}
&amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
&amp;lt;h2&amp;gt;{{ .Date.Format &amp;quot;Mon, Jan 2, 2006&amp;quot; }}&amp;lt;/h2&amp;gt;
{{ .Content }}
{{ partial &amp;quot;footer.html&amp;quot; . }}
:wq
&lt;/code>&lt;/pre>&lt;p>Note that we removed the date logic from the default template and put it in the post template. Generate the web site and verify the results. Posts have dates and the about page doesn't.&lt;/p>
&lt;h3 id="dont-repeat-yourself">Don't Repeat Yourself&lt;/h3>
&lt;p>DRY is a good design goal and Hugo does a great job supporting it. Part of the art of a good template is knowing when to add a new template and when to update an existing one. While you're figuring that out, accept that you'll be doing some refactoring. Hugo makes that easy and fast, so it's okay to delay splitting up a template.&lt;/p></description></item><item><title>(Hu)go Template Primer</title><link>/posts/goisforlovers/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>/posts/goisforlovers/</guid><description>&lt;p>Hugo uses the excellent &lt;a href="http://golang.org/">go&lt;/a> &lt;a href="http://golang.org/pkg/html/template/">html/template&lt;/a> library for
its template engine. It is an extremely lightweight engine that provides a very
small amount of logic. In our experience that it is just the right amount of
logic to be able to create a good static website. If you have used other
template systems from different languages or frameworks you will find a lot of
similarities in go templates.&lt;/p>
&lt;p>This document is a brief primer on using go templates. The &lt;a href="http://golang.org/pkg/html/template/">go docs&lt;/a>
provide more details.&lt;/p>
&lt;h2 id="introduction-to-go-templates">Introduction to Go Templates&lt;/h2>
&lt;p>Go templates provide an extremely simple template language. It adheres to the
belief that only the most basic of logic belongs in the template or view layer.
One consequence of this simplicity is that go templates parse very quickly.&lt;/p>
&lt;p>A unique characteristic of go templates is they are content aware. Variables and
content will be sanitized depending on the context of where they are used. More
details can be found in the &lt;a href="http://golang.org/pkg/html/template/">go docs&lt;/a>.&lt;/p>
&lt;h2 id="basic-syntax">Basic Syntax&lt;/h2>
&lt;p>Go lang templates are html files with the addition of variables and
functions.&lt;/p>
&lt;p>&lt;strong>Go variables and functions are accessible within {{ }}&lt;/strong>&lt;/p>
&lt;p>Accessing a predefined variable &amp;ldquo;foo&amp;rdquo;:&lt;/p>
&lt;pre>&lt;code>{{ foo }}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>Parameters are separated using spaces&lt;/strong>&lt;/p>
&lt;p>Calling the add function with input of 1, 2:&lt;/p>
&lt;pre>&lt;code>{{ add 1 2 }}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>Methods and fields are accessed via dot notation&lt;/strong>&lt;/p>
&lt;p>Accessing the Page Parameter &amp;ldquo;bar&amp;rdquo;&lt;/p>
&lt;pre>&lt;code>{{ .Params.bar }}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>Parentheses can be used to group items together&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{ if or (isset .Params &amp;quot;alt&amp;quot;) (isset .Params &amp;quot;caption&amp;quot;) }} Caption {{ end }}
&lt;/code>&lt;/pre>
&lt;h2 id="variables">Variables&lt;/h2>
&lt;p>Each go template has a struct (object) made available to it. In hugo each
template is passed either a page or a node struct depending on which type of
page you are rendering. More details are available on the
&lt;a href="/layout/variables">variables&lt;/a> page.&lt;/p>
&lt;p>A variable is accessed by referencing the variable name.&lt;/p>
&lt;pre>&lt;code>&amp;lt;title&amp;gt;{{ .Title }}&amp;lt;/title&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>Variables can also be defined and referenced.&lt;/p>
&lt;pre>&lt;code>{{ $address := &amp;quot;123 Main St.&amp;quot;}}
{{ $address }}
&lt;/code>&lt;/pre>
&lt;h2 id="functions">Functions&lt;/h2>
&lt;p>Go template ship with a few functions which provide basic functionality. The go
template system also provides a mechanism for applications to extend the
available functions with their own. &lt;a href="/layout/functions">Hugo template
functions&lt;/a> provide some additional functionality we believe
are useful for building websites. Functions are called by using their name
followed by the required parameters separated by spaces. Template
functions cannot be added without recompiling hugo.&lt;/p>
&lt;p>&lt;strong>Example:&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{ add 1 2 }}
&lt;/code>&lt;/pre>
&lt;h2 id="includes">Includes&lt;/h2>
&lt;p>When including another template you will pass to it the data it will be
able to access. To pass along the current context please remember to
include a trailing dot. The templates location will always be starting at
the /layout/ directory within Hugo.&lt;/p>
&lt;p>&lt;strong>Example:&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{ template &amp;quot;chrome/header.html&amp;quot; . }}
&lt;/code>&lt;/pre>
&lt;h2 id="logic">Logic&lt;/h2>
&lt;p>Go templates provide the most basic iteration and conditional logic.&lt;/p>
&lt;h3 id="iteration">Iteration&lt;/h3>
&lt;p>Just like in go, the go templates make heavy use of range to iterate over
a map, array or slice. The following are different examples of how to use
range.&lt;/p>
&lt;p>&lt;strong>Example 1: Using Context&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{ range array }}
{{ . }}
{{ end }}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>Example 2: Declaring value variable name&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{range $element := array}}
{{ $element }}
{{ end }}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>Example 2: Declaring key and value variable name&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{range $index, $element := array}}
{{ $index }}
{{ $element }}
{{ end }}
&lt;/code>&lt;/pre>
&lt;h3 id="conditionals">Conditionals&lt;/h3>
&lt;p>If, else, with, or, &amp;amp; and provide the framework for handling conditional
logic in Go Templates. Like range, each statement is closed with &lt;code>end&lt;/code>.&lt;/p>
&lt;p>Go Templates treat the following values as false:&lt;/p>
&lt;ul>
&lt;li>false&lt;/li>
&lt;li>0&lt;/li>
&lt;li>any array, slice, map, or string of length zero&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Example 1: If&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{ if isset .Params &amp;quot;title&amp;quot; }}&amp;lt;h4&amp;gt;{{ index .Params &amp;quot;title&amp;quot; }}&amp;lt;/h4&amp;gt;{{ end }}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>Example 2: If -&amp;gt; Else&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{ if isset .Params &amp;quot;alt&amp;quot; }}
{{ index .Params &amp;quot;alt&amp;quot; }}
{{else}}
{{ index .Params &amp;quot;caption&amp;quot; }}
{{ end }}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>Example 3: And &amp;amp; Or&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{ if and (or (isset .Params &amp;quot;title&amp;quot;) (isset .Params &amp;quot;caption&amp;quot;)) (isset .Params &amp;quot;attr&amp;quot;)}}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>Example 4: With&lt;/strong>&lt;/p>
&lt;p>An alternative way of writing &amp;ldquo;if&amp;rdquo; and then referencing the same value
is to use &amp;ldquo;with&amp;rdquo; instead. With rebinds the context &lt;code>.&lt;/code> within its scope,
and skips the block if the variable is absent.&lt;/p>
&lt;p>The first example above could be simplified as:&lt;/p>
&lt;pre>&lt;code>{{ with .Params.title }}&amp;lt;h4&amp;gt;{{ . }}&amp;lt;/h4&amp;gt;{{ end }}
&lt;/code>&lt;/pre>
&lt;p>&lt;strong>Example 5: If -&amp;gt; Else If&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{ if isset .Params &amp;quot;alt&amp;quot; }}
{{ index .Params &amp;quot;alt&amp;quot; }}
{{ else if isset .Params &amp;quot;caption&amp;quot; }}
{{ index .Params &amp;quot;caption&amp;quot; }}
{{ end }}
&lt;/code>&lt;/pre>
&lt;h2 id="pipes">Pipes&lt;/h2>
&lt;p>One of the most powerful components of go templates is the ability to
stack actions one after another. This is done by using pipes. Borrowed
from unix pipes, the concept is simple, each pipeline's output becomes the
input of the following pipe.&lt;/p>
&lt;p>Because of the very simple syntax of go templates, the pipe is essential
to being able to chain together function calls. One limitation of the
pipes is that they only can work with a single value and that value
becomes the last parameter of the next pipeline.&lt;/p>
&lt;p>A few simple examples should help convey how to use the pipe.&lt;/p>
&lt;p>&lt;strong>Example 1 :&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{ if eq 1 1 }} Same {{ end }}
&lt;/code>&lt;/pre>
&lt;p>is the same as&lt;/p>
&lt;pre>&lt;code>{{ eq 1 1 | if }} Same {{ end }}
&lt;/code>&lt;/pre>
&lt;p>It does look odd to place the if at the end, but it does provide a good
illustration of how to use the pipes.&lt;/p>
&lt;p>&lt;strong>Example 2 :&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{ index .Params &amp;quot;disqus_url&amp;quot; | html }}
&lt;/code>&lt;/pre>
&lt;p>Access the page parameter called &amp;ldquo;disqus_url&amp;rdquo; and escape the HTML.&lt;/p>
&lt;p>&lt;strong>Example 3 :&lt;/strong>&lt;/p>
&lt;pre>&lt;code>{{ if or (or (isset .Params &amp;quot;title&amp;quot;) (isset .Params &amp;quot;caption&amp;quot;)) (isset .Params &amp;quot;attr&amp;quot;)}}
Stuff Here
{{ end }}
&lt;/code>&lt;/pre>
&lt;p>Could be rewritten as&lt;/p>
&lt;pre>&lt;code>{{ isset .Params &amp;quot;caption&amp;quot; | or isset .Params &amp;quot;title&amp;quot; | or isset .Params &amp;quot;attr&amp;quot; | if }}
Stuff Here
{{ end }}
&lt;/code>&lt;/pre>
&lt;h2 id="context-aka-the-dot">Context (aka. the dot)&lt;/h2>
&lt;p>The most easily overlooked concept to understand about go templates is that {{ . }}
always refers to the current context. In the top level of your template this
will be the data set made available to it. Inside of a iteration it will have
the value of the current item. When inside of a loop the context has changed. .
will no longer refer to the data available to the entire page. If you need to
access this from within the loop you will likely want to set it to a variable
instead of depending on the context.&lt;/p>
&lt;p>&lt;strong>Example:&lt;/strong>&lt;/p>
&lt;pre>&lt;code> {{ $title := .Site.Title }}
{{ range .Params.tags }}
&amp;lt;li&amp;gt; &amp;lt;a href=&amp;quot;{{ $baseurl }}/tags/{{ . | urlize }}&amp;quot;&amp;gt;{{ . }}&amp;lt;/a&amp;gt; - {{ $title }} &amp;lt;/li&amp;gt;
{{ end }}
&lt;/code>&lt;/pre>
&lt;p>Notice how once we have entered the loop the value of {{ . }} has changed. We
have defined a variable outside of the loop so we have access to it from within
the loop.&lt;/p>
&lt;h1 id="hugo-parameters">Hugo Parameters&lt;/h1>
&lt;p>Hugo provides the option of passing values to the template language
through the site configuration (for sitewide values), or through the meta
data of each specific piece of content. You can define any values of any
type (supported by your front matter/config format) and use them however
you want to inside of your templates.&lt;/p>
&lt;h2 id="using-content-page-parameters">Using Content (page) Parameters&lt;/h2>
&lt;p>In each piece of content you can provide variables to be used by the
templates. This happens in the &lt;a href="/content/front-matter">front matter&lt;/a>.&lt;/p>
&lt;p>An example of this is used in this documentation site. Most of the pages
benefit from having the table of contents provided. Sometimes the TOC just
doesn't make a lot of sense. We've defined a variable in our front matter
of some pages to turn off the TOC from being displayed.&lt;/p>
&lt;p>Here is the example front matter:&lt;/p>
&lt;pre>&lt;code>---
title: &amp;quot;Permalinks&amp;quot;
date: &amp;quot;2013-11-18&amp;quot;
aliases:
- &amp;quot;/doc/permalinks/&amp;quot;
groups: [&amp;quot;extras&amp;quot;]
groups_weight: 30
notoc: true
---
&lt;/code>&lt;/pre>&lt;p>Here is the corresponding code inside of the template:&lt;/p>
&lt;pre>&lt;code> {{ if not .Params.notoc }}
&amp;lt;div id=&amp;quot;toc&amp;quot; class=&amp;quot;well col-md-4 col-sm-6&amp;quot;&amp;gt;
{{ .TableOfContents }}
&amp;lt;/div&amp;gt;
{{ end }}
&lt;/code>&lt;/pre>
&lt;h2 id="using-site-config-parameters">Using Site (config) Parameters&lt;/h2>
&lt;p>In your top-level configuration file (eg, &lt;code>config.yaml&lt;/code>) you can define site
parameters, which are values which will be available to you in chrome.&lt;/p>
&lt;p>For instance, you might declare:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">params:
CopyrightHTML: &lt;span style="color:#e6db74">&amp;#34;Copyright &amp;amp;#xA9; 2013 John Doe. All Rights Reserved.&amp;#34;&lt;/span>
TwitterUser: &lt;span style="color:#e6db74">&amp;#34;spf13&amp;#34;&lt;/span>
SidebarRecentLimit: &lt;span style="color:#ae81ff">5&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Within a footer layout, you might then declare a &lt;code>&amp;lt;footer&amp;gt;&lt;/code> which is only
provided if the &lt;code>CopyrightHTML&lt;/code> parameter is provided, and if it is given,
you would declare it to be HTML-safe, so that the HTML entity is not escaped
again. This would let you easily update just your top-level config file each
January 1st, instead of hunting through your templates.&lt;/p>
&lt;pre>&lt;code>{{if .Site.Params.CopyrightHTML}}&amp;lt;footer&amp;gt;
&amp;lt;div class=&amp;quot;text-center&amp;quot;&amp;gt;{{.Site.Params.CopyrightHTML | safeHtml}}&amp;lt;/div&amp;gt;
&amp;lt;/footer&amp;gt;{{end}}
&lt;/code>&lt;/pre>&lt;p>An alternative way of writing the &amp;ldquo;if&amp;rdquo; and then referencing the same value
is to use &amp;ldquo;with&amp;rdquo; instead. With rebinds the context &lt;code>.&lt;/code> within its scope,
and skips the block if the variable is absent:&lt;/p>
&lt;pre>&lt;code>{{with .Site.Params.TwitterUser}}&amp;lt;span class=&amp;quot;twitter&amp;quot;&amp;gt;
&amp;lt;a href=&amp;quot;https://twitter.com/{{.}}&amp;quot; rel=&amp;quot;author&amp;quot;&amp;gt;
&amp;lt;img src=&amp;quot;/images/twitter.png&amp;quot; width=&amp;quot;48&amp;quot; height=&amp;quot;48&amp;quot; title=&amp;quot;Twitter: {{.}}&amp;quot;
alt=&amp;quot;Twitter&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;
&amp;lt;/span&amp;gt;{{end}}
&lt;/code>&lt;/pre>&lt;p>Finally, if you want to pull &amp;ldquo;magic constants&amp;rdquo; out of your layouts, you can do
so, such as in this example:&lt;/p>
&lt;pre>&lt;code>&amp;lt;nav class=&amp;quot;recent&amp;quot;&amp;gt;
&amp;lt;h1&amp;gt;Recent Posts&amp;lt;/h1&amp;gt;
&amp;lt;ul&amp;gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}}
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;{{.RelPermalink}}&amp;quot;&amp;gt;{{.Title}}&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
{{end}}&amp;lt;/ul&amp;gt;
&amp;lt;/nav&amp;gt;
&lt;/code>&lt;/pre></description></item><item><title>Getting Started with Hugo</title><link>/posts/hugoisforlovers/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>/posts/hugoisforlovers/</guid><description>&lt;h2 id="step-1-install-hugo">Step 1. Install Hugo&lt;/h2>
&lt;p>Goto &lt;a href="https://github.com/spf13/hugo/releases">hugo releases&lt;/a> and download the
appropriate version for your os and architecture.&lt;/p>
&lt;p>Save it somewhere specific as we will be using it in the next step.&lt;/p>
&lt;p>More complete instructions are available at &lt;a href="/overview/installing/">installing hugo&lt;/a>&lt;/p>
&lt;h2 id="step-2-build-the-docs">Step 2. Build the Docs&lt;/h2>
&lt;p>Hugo has its own example site which happens to also be the documentation site
you are reading right now.&lt;/p>
&lt;p>Follow the following steps:&lt;/p>
&lt;ol>
&lt;li>Clone the &lt;a href="http://github.com/spf13/hugo">hugo repository&lt;/a>&lt;/li>
&lt;li>Go into the repo&lt;/li>
&lt;li>Run hugo in server mode and build the docs&lt;/li>
&lt;li>Open your browser to http://localhost:1313&lt;/li>
&lt;/ol>
&lt;p>Corresponding pseudo commands:&lt;/p>
&lt;pre>&lt;code>git clone https://github.com/spf13/hugo
cd hugo
/path/to/where/you/installed/hugo server --source=./docs
&amp;gt; 29 pages created
&amp;gt; 0 tags index created
&amp;gt; in 27 ms
&amp;gt; Web Server is available at http://localhost:1313
&amp;gt; Press ctrl+c to stop
&lt;/code>&lt;/pre>
&lt;p>Once you've gotten here, follow along the rest of this page on your local build.&lt;/p>
&lt;h2 id="step-3-change-the-docs-site">Step 3. Change the docs site&lt;/h2>
&lt;p>Stop the Hugo process by hitting ctrl+c.&lt;/p>
&lt;p>Now we are going to run hugo again, but this time with hugo in watch mode.&lt;/p>
&lt;pre>&lt;code>/path/to/hugo/from/step/1/hugo server --source=./docs --watch
&amp;gt; 29 pages created
&amp;gt; 0 tags index created
&amp;gt; in 27 ms
&amp;gt; Web Server is available at http://localhost:1313
&amp;gt; Watching for changes in /Users/spf13/Code/hugo/docs/content
&amp;gt; Press ctrl+c to stop
&lt;/code>&lt;/pre>
&lt;p>Open your &lt;a href="http://vim.spf13.com">favorite editor&lt;/a> and change one of the source
content pages. How about changing this very file to &lt;em>fix the typo&lt;/em>. How about changing this very file to &lt;em>fix the typo&lt;/em>.&lt;/p>
&lt;p>Content files are found in &lt;code>docs/content/&lt;/code>. Unless otherwise specified, files
are located at the same relative location as the url, in our case
&lt;code>docs/content/overview/quickstart.md&lt;/code>.&lt;/p>
&lt;p>Change and save this file.. Notice what happened in your terminal.&lt;/p>
&lt;pre>&lt;code>&amp;gt; Change detected, rebuilding site
&amp;gt; 29 pages created
&amp;gt; 0 tags index created
&amp;gt; in 26 ms
&lt;/code>&lt;/pre>
&lt;p>Refresh the browser and observe that the typo is now fixed.&lt;/p>
&lt;p>Notice how quick that was. Try to refresh the site before it's finished building.. I double dare you.
Having nearly instant feedback enables you to have your creativity flow without waiting for long builds.&lt;/p>
&lt;h2 id="step-4-have-fun">Step 4. Have fun&lt;/h2>
&lt;p>The best way to learn something is to play with it.&lt;/p></description></item><item><title>Migrate to Hugo from Jekyll</title><link>/posts/migrate-from-jekyll/</link><pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate><guid>/posts/migrate-from-jekyll/</guid><description>&lt;h2 id="move-static-content-to-static">Move static content to &lt;code>static&lt;/code>&lt;/h2>
&lt;p>Jekyll has a rule that any directory not starting with &lt;code>_&lt;/code> will be copied as-is to the &lt;code>_site&lt;/code> output. Hugo keeps all static content under &lt;code>static&lt;/code>. You should therefore move it all there.
With Jekyll, something that looked like&lt;/p>
&lt;pre>&lt;code>▾ &amp;lt;root&amp;gt;/
▾ images/
logo.png
&lt;/code>&lt;/pre>
&lt;p>should become&lt;/p>
&lt;pre>&lt;code>▾ &amp;lt;root&amp;gt;/
▾ static/
▾ images/
logo.png
&lt;/code>&lt;/pre>
&lt;p>Additionally, you'll want any files that should reside at the root (such as &lt;code>CNAME&lt;/code>) to be moved to &lt;code>static&lt;/code>.&lt;/p>
&lt;h2 id="create-your-hugo-configuration-file">Create your Hugo configuration file&lt;/h2>
&lt;p>Hugo can read your configuration as JSON, YAML or TOML. Hugo supports parameters custom configuration too. Refer to the &lt;a href="/overview/configuration/">Hugo configuration documentation&lt;/a> for details.&lt;/p>
&lt;h2 id="set-your-configuration-publish-folder-to-site">Set your configuration publish folder to &lt;code>_site&lt;/code>&lt;/h2>
&lt;p>The default is for Jekyll to publish to &lt;code>_site&lt;/code> and for Hugo to publish to &lt;code>public&lt;/code>. If, like me, you have &lt;a href="http://blog.blindgaenger.net/generate_github_pages_in_a_submodule.html">&lt;code>_site&lt;/code> mapped to a git submodule on the &lt;code>gh-pages&lt;/code> branch&lt;/a>, you'll want to do one of two alternatives:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Change your submodule to point to map &lt;code>gh-pages&lt;/code> to public instead of &lt;code>_site&lt;/code> (recommended).&lt;/p>
&lt;pre>&lt;code> git submodule deinit _site
git rm _site
git submodule add -b gh-pages git@github.com:your-username/your-repo.git public
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>Or, change the Hugo configuration to use &lt;code>_site&lt;/code> instead of &lt;code>public&lt;/code>.&lt;/p>
&lt;pre>&lt;code> {
..
&amp;quot;publishdir&amp;quot;: &amp;quot;_site&amp;quot;,
..
}
&lt;/code>&lt;/pre>
&lt;/li>
&lt;/ol>
&lt;h2 id="convert-jekyll-templates-to-hugo-templates">Convert Jekyll templates to Hugo templates&lt;/h2>
&lt;p>That's the bulk of the work right here. The documentation is your friend. You should refer to &lt;a href="http://jekyllrb.com/docs/templates/">Jekyll's template documentation&lt;/a> if you need to refresh your memory on how you built your blog and &lt;a href="/layout/templates/">Hugo's template&lt;/a> to learn Hugo's way.&lt;/p>
&lt;p>As a single reference data point, converting my templates for &lt;a href="http://heyitsalex.net/">heyitsalex.net&lt;/a> took me no more than a few hours.&lt;/p>
&lt;h2 id="convert-jekyll-plugins-to-hugo-shortcodes">Convert Jekyll plugins to Hugo shortcodes&lt;/h2>
&lt;p>Jekyll has &lt;a href="http://jekyllrb.com/docs/plugins/">plugins&lt;/a>; Hugo has &lt;a href="/doc/shortcodes/">shortcodes&lt;/a>. It's fairly trivial to do a port.&lt;/p>
&lt;h3 id="implementation">Implementation&lt;/h3>
&lt;p>As an example, I was using a custom &lt;a href="https://github.com/alexandre-normand/alexandre-normand/blob/74bb12036a71334fdb7dba84e073382fc06908ec/_plugins/image_tag.rb">&lt;code>image_tag&lt;/code>&lt;/a> plugin to generate figures with caption when running Jekyll. As I read about shortcodes, I found Hugo had a nice built-in shortcode that does exactly the same thing.&lt;/p>
&lt;p>Jekyll's plugin:&lt;/p>
&lt;pre>&lt;code>module Jekyll
class ImageTag &amp;lt; Liquid::Tag
@url = nil
@caption = nil
@class = nil
@link = nil
// Patterns
IMAGE_URL_WITH_CLASS_AND_CAPTION =
IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK = /(\w+)(\s+)((https?:\/\/|\/)(\S+))(\s+)&amp;quot;(.*?)&amp;quot;(\s+)-&amp;gt;((https?:\/\/|\/)(\S+))(\s*)/i
IMAGE_URL_WITH_CAPTION = /((https?:\/\/|\/)(\S+))(\s+)&amp;quot;(.*?)&amp;quot;/i
IMAGE_URL_WITH_CLASS = /(\w+)(\s+)((https?:\/\/|\/)(\S+))/i
IMAGE_URL = /((https?:\/\/|\/)(\S+))/i
def initialize(tag_name, markup, tokens)
super
if markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK
@class = $1
@url = $3
@caption = $7
@link = $9
elsif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION
@class = $1
@url = $3
@caption = $7
elsif markup =~ IMAGE_URL_WITH_CAPTION
@url = $1
@caption = $5
elsif markup =~ IMAGE_URL_WITH_CLASS
@class = $1
@url = $3
elsif markup =~ IMAGE_URL
@url = $1
end
end
def render(context)
if @class
source = &amp;quot;&amp;lt;figure class='#{@class}'&amp;gt;&amp;quot;
else
source = &amp;quot;&amp;lt;figure&amp;gt;&amp;quot;
end
if @link
source += &amp;quot;&amp;lt;a href=\&amp;quot;#{@link}\&amp;quot;&amp;gt;&amp;quot;
end
source += &amp;quot;&amp;lt;img src=\&amp;quot;#{@url}\&amp;quot;&amp;gt;&amp;quot;
if @link
source += &amp;quot;&amp;lt;/a&amp;gt;&amp;quot;
end
source += &amp;quot;&amp;lt;figcaption&amp;gt;#{@caption}&amp;lt;/figcaption&amp;gt;&amp;quot; if @caption
source += &amp;quot;&amp;lt;/figure&amp;gt;&amp;quot;
source
end
end
end
Liquid::Template.register_tag('image', Jekyll::ImageTag)
&lt;/code>&lt;/pre>
&lt;p>is written as this Hugo shortcode:&lt;/p>
&lt;pre>&lt;code>&amp;lt;!-- image --&amp;gt;
&amp;lt;figure {{ with .Get &amp;quot;class&amp;quot; }}class=&amp;quot;{{.}}&amp;quot;{{ end }}&amp;gt;
{{ with .Get &amp;quot;link&amp;quot;}}&amp;lt;a href=&amp;quot;{{.}}&amp;quot;&amp;gt;{{ end }}
&amp;lt;img src=&amp;quot;{{ .Get &amp;quot;src&amp;quot; }}&amp;quot; {{ if or (.Get &amp;quot;alt&amp;quot;) (.Get &amp;quot;caption&amp;quot;) }}alt=&amp;quot;{{ with .Get &amp;quot;alt&amp;quot;}}{{.}}{{else}}{{ .Get &amp;quot;caption&amp;quot; }}{{ end }}&amp;quot;{{ end }} /&amp;gt;
{{ if .Get &amp;quot;link&amp;quot;}}&amp;lt;/a&amp;gt;{{ end }}
{{ if or (or (.Get &amp;quot;title&amp;quot;) (.Get &amp;quot;caption&amp;quot;)) (.Get &amp;quot;attr&amp;quot;)}}
&amp;lt;figcaption&amp;gt;{{ if isset .Params &amp;quot;title&amp;quot; }}
{{ .Get &amp;quot;title&amp;quot; }}{{ end }}
{{ if or (.Get &amp;quot;caption&amp;quot;) (.Get &amp;quot;attr&amp;quot;)}}&amp;lt;p&amp;gt;
{{ .Get &amp;quot;caption&amp;quot; }}
{{ with .Get &amp;quot;attrlink&amp;quot;}}&amp;lt;a href=&amp;quot;{{.}}&amp;quot;&amp;gt; {{ end }}
{{ .Get &amp;quot;attr&amp;quot; }}
{{ if .Get &amp;quot;attrlink&amp;quot;}}&amp;lt;/a&amp;gt; {{ end }}
&amp;lt;/p&amp;gt; {{ end }}
&amp;lt;/figcaption&amp;gt;
{{ end }}
&amp;lt;/figure&amp;gt;
&amp;lt;!-- image --&amp;gt;
&lt;/code>&lt;/pre>
&lt;h3 id="usage">Usage&lt;/h3>
&lt;p>I simply changed:&lt;/p>
&lt;pre>&lt;code>{% image full http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg &amp;quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were &amp;quot;having fun&amp;quot; and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.&amp;quot; -&amp;gt;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/ %}
&lt;/code>&lt;/pre>
&lt;p>to this (this example uses a slightly extended version named &lt;code>fig&lt;/code>, different than the built-in &lt;code>figure&lt;/code>):&lt;/p>
&lt;pre>&lt;code>{{% fig class=&amp;quot;full&amp;quot; src=&amp;quot;http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg&amp;quot; title=&amp;quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were having fun and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.&amp;quot; link=&amp;quot;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/&amp;quot; %}}
&lt;/code>&lt;/pre>
&lt;p>As a bonus, the shortcode named parameters are, arguably, more readable.&lt;/p>
&lt;h2 id="finishing-touches">Finishing touches&lt;/h2>
&lt;h3 id="fix-content">Fix content&lt;/h3>
&lt;p>Depending on the amount of customization that was done with each post with Jekyll, this step will require more or less effort. There are no hard and fast rules here except that &lt;code>hugo server --watch&lt;/code> is your friend. Test your changes and fix errors as needed.&lt;/p>
&lt;h3 id="clean-up">Clean up&lt;/h3>
&lt;p>You'll want to remove the Jekyll configuration at this point. If you have anything else that isn't used, delete it.&lt;/p>
&lt;h2 id="a-practical-example-in-a-diff">A practical example in a diff&lt;/h2>
&lt;p>&lt;a href="http://heyitsalex.net/">Hey, it's Alex&lt;/a> was migrated in less than a &lt;em>father-with-kids day&lt;/em> from Jekyll to Hugo. You can see all the changes (and screw-ups) by looking at this &lt;a href="https://github.com/alexandre-normand/alexandre-normand/compare/869d69435bd2665c3fbf5b5c78d4c22759d7613a...b7f6605b1265e83b4b81495423294208cc74d610">diff&lt;/a>.&lt;/p></description></item></channel></rss>